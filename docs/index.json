[{"categories":["比赛","Android"],"content":"违章查询","date":"2021-06-23","objectID":"/%E8%BF%9D%E7%AB%A0%E6%9F%A5%E8%AF%A2/","tags":["比赛","Android"],"title":" 违章查询","uri":"/%E8%BF%9D%E7%AB%A0%E6%9F%A5%E8%AF%A2/"},{"categories":["比赛","Android"],"content":"先写XML文件 \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:background=\"#f1f1f1\" android:gravity=\"center_vertical\" android:orientation=\"vertical\" \u003e \u003cTextView android:textColor=\"#000\" android:textStyle=\"bold\" android:padding=\"10dp\" android:textSize=\"18sp\" android:text=\"车辆违章查询\" android:layout_marginLeft=\"30dp\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" /\u003e \u003cLinearLayout android:layout_marginTop=\"30dp\" android:layout_marginLeft=\"30dp\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\"\u003e \u003cTextView android:textColor=\"#000\" android:textStyle=\"bold\" android:textSize=\"18sp\" android:text=\"车牌号：鲁\" android:padding=\"10dp\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" /\u003e \u003cEditText android:id=\"@+id/et_car\" android:padding=\"5dp\" android:textSize=\"18sp\" android:singleLine=\"true\" android:maxLength=\"6\" android:textStyle=\"bold\" android:textColor=\"#000\" android:background=\"@drawable/border_55\" android:layout_width=\"120dp\" android:layout_height=\"wrap_content\" /\u003e \u003cButton android:id=\"@+id/bt_cx\" android:textColor=\"#000\" android:textStyle=\"bold\" android:textSize=\"16sp\" android:layout_marginLeft=\"30dp\" android:text=\"查询\" android:background=\"@drawable/border_hh10\" android:layout_width=\"60dp\" android:layout_height=\"30dp\" /\u003e \u003c/LinearLayout\u003e \u003c/LinearLayout\u003e ","date":"2021-06-23","objectID":"/%E8%BF%9D%E7%AB%A0%E6%9F%A5%E8%AF%A2/:1:0","tags":["比赛","Android"],"title":" 违章查询","uri":"/%E8%BF%9D%E7%AB%A0%E6%9F%A5%E8%AF%A2/"},{"categories":["比赛","Android"],"content":"更据XML文件插件直接生成 ==不是核心代码== public class Fragment_4 extends Fragment implements View.OnClickListener { private EditText et_car; private Button bt_cz; @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { View view = inflater .inflate(R.layout.fragment_layout04, container, false); initView(view); return view; } private void initView(View view) { et_car = (EditText) view.findViewById(R.id.et_car); bt_cz = (Button) view.findViewById(R.id.bt_cz); bt_cz.setOnClickListener(this); } @Override public void onClick(View v) { switch (v.getId()) { case R.id.bt_cz: submit();//在下面单独列出来 break; } } } ","date":"2021-06-23","objectID":"/%E8%BF%9D%E7%AB%A0%E6%9F%A5%E8%AF%A2/:2:0","tags":["比赛","Android"],"title":" 违章查询","uri":"/%E8%BF%9D%E7%AB%A0%E6%9F%A5%E8%AF%A2/"},{"categories":["比赛","Android"],"content":"submit();方法的代码 ​ ==核心代码== private void submit() { // validate String car = et_car.getText().toString().trim(); if (TextUtils.isEmpty(car)) { Toast.makeText(getContext(), \"输入不能为空\", Toast.LENGTH_SHORT).show(); return; } //这里要统一转成大写 final String carnumber = (\"鲁\" + car).toUpperCase(); LoadingDialog.showDialog(getContext()); //弹出正在查询的对话框 //查询车辆违章接口的请求数据 HashMap hashMap = new HashMap(); hashMap.put(\"UserName\", \"user1\"); hashMap.put(\"carnumber\", carnumber); InitApp.doPost(\"get_car_peccancy\", hashMap, new Response.Listener\u003cJSONObject\u003e() { @Override public void onResponse(JSONObject jsonObject) { List\u003cCarwz.ROWSDETAILBean\u003e list = InitApp.gson.fromJson(String.valueOf(jsonObject), Carwz.class).getROWS_DETAIL(); //判断接口返回的数据集合长度是否为空，为空这没有违章数据 if (list.size() == 0) { InitApp.toast(\"没有查询到\" + carnumber + \"车的违章数据\"); } else { //取sp里的违章记录 String spString = InitApp.sp.getString(\"carwz\", null); ArrayList\u003cCarwzs\u003e arrayList; //判断sp里的违章记录是否为空 ，为空则new 一个集合，不为空则使用sp中的违章记录集合 if (spString == null) { arrayList = new ArrayList\u003c\u003e(); } else { arrayList = InitApp.gson.fromJson(spString, new TypeToken\u003cArrayList\u003cCarwzs\u003e\u003e() { }.getType()); //sp不为空时要判断集合中是否有查询的车辆，有则提示已添加 for (Carwzs bean : arrayList) { if (carnumber.equals(bean.getCarnumber())) { InitApp.toast(\"该车已添加\"); LoadingDialog.disDialog(); return; } } } //集合中的对象下面Carwzs()的详细代码 Carwzs carwzs = new Carwzs(); //将接口返回的数据添加到对象中 carwzs.setROWS_DETAIL(list); //记录添加的车牌号用来判断是否存在sp集合中 carwzs.setCarnumber(carnumber); //将Carwzs()对象加入集合中 arrayList.add(carwzs); //将集合存入sp中 InitApp.edit.putString(\"carwz\", InitApp.gson.toJson(arrayList)).commit(); startActivity(new Intent(getContext(), Activity_4_1.class)); } et_car.setText(null); LoadingDialog.disDialog(); } }); } @Override public void onDestroy() { super.onDestroy(); InitApp.edit.remove(\"carwz\").commit(); } ","date":"2021-06-23","objectID":"/%E8%BF%9D%E7%AB%A0%E6%9F%A5%E8%AF%A2/:3:0","tags":["比赛","Android"],"title":" 违章查询","uri":"/%E8%BF%9D%E7%AB%A0%E6%9F%A5%E8%AF%A2/"},{"categories":["比赛","Android"],"content":"Carwzs()对象代码 public class Carwzs { private List\u003cCarwz.ROWSDETAILBean\u003e ROWS_DETAIL; //一辆车的违章记录 private String carnumber; //违章车牌号 private int pmoney;//所有违章的罚款 private int pscore;//所有违章扣的分 //Getter and Setter 方法 } ","date":"2021-06-23","objectID":"/%E8%BF%9D%E7%AB%A0%E6%9F%A5%E8%AF%A2/:4:0","tags":["比赛","Android"],"title":" 违章查询","uri":"/%E8%BF%9D%E7%AB%A0%E6%9F%A5%E8%AF%A2/"},{"categories":["比赛","Android"],"content":"Activity_4_1显示查询结果的页面 ","date":"2021-06-23","objectID":"/%E8%BF%9D%E7%AB%A0%E6%9F%A5%E8%AF%A2/:5:0","tags":["比赛","Android"],"title":" 违章查询","uri":"/%E8%BF%9D%E7%AB%A0%E6%9F%A5%E8%AF%A2/"},{"categories":["比赛","Android"],"content":"Activity_4_1.xml \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:orientation=\"vertical\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"\u003e \u003cinclude layout=\"@layout/title\" /\u003e \u003cRelativeLayout android:layout_weight=\"1\" android:layout_margin=\"10dp\" android:background=\"@color/light_gray\" android:layout_width=\"match_parent\" android:paddingBottom=\"10dp\" android:paddingLeft=\"15dp\" android:layout_height=\"0dp\" \u003e \u003cTextView android:id=\"@+id/tv1\" android:textSize=\"18sp\" android:textStyle=\"bold\" android:textColor=\"#000\" android:padding=\"10dp\" android:text=\"汽车资料卡片\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" /\u003e \u003cImageView android:id=\"@+id/iv_add\" android:src=\"@mipmap/add2\" android:layout_alignParentRight=\"true\" android:layout_marginTop=\"10dp\" android:layout_marginRight=\"30dp\" android:layout_width=\"30dp\" android:layout_height=\"30dp\"/\u003e \u003cHorizontalScrollView android:layout_below=\"@+id/tv1\" android:scrollbars=\"none\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" \u003e \u003cLinearLayout android:orientation=\"horizontal\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"\u003e \u003cGridView android:id=\"@+id/gv_top\" android:paddingLeft=\"10dp\" android:horizontalSpacing=\"10dp\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" /\u003e \u003c/LinearLayout\u003e \u003c/HorizontalScrollView\u003e \u003c/RelativeLayout\u003e \u003cRelativeLayout android:layout_weight=\"1\" android:layout_margin=\"10dp\" android:background=\"@color/light_gray\" android:layout_width=\"match_parent\" android:paddingBottom=\"10dp\" android:paddingLeft=\"15dp\" android:layout_height=\"0dp\" \u003e \u003cTextView android:id=\"@+id/tv2\" android:textSize=\"18sp\" android:textStyle=\"bold\" android:textColor=\"#000\" android:padding=\"10dp\" android:text=\"违章详情\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" /\u003e \u003cHorizontalScrollView android:layout_below=\"@+id/tv2\" android:scrollbars=\"none\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" \u003e \u003cLinearLayout android:orientation=\"horizontal\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"\u003e \u003cGridView android:id=\"@+id/gv_bottom\" android:paddingLeft=\"10dp\" android:horizontalSpacing=\"10dp\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" /\u003e \u003c/LinearLayout\u003e \u003c/HorizontalScrollView\u003e \u003c/RelativeLayout\u003e \u003c/LinearLayout\u003e ","date":"2021-06-23","objectID":"/%E8%BF%9D%E7%AB%A0%E6%9F%A5%E8%AF%A2/:5:1","tags":["比赛","Android"],"title":" 违章查询","uri":"/%E8%BF%9D%E7%AB%A0%E6%9F%A5%E8%AF%A2/"},{"categories":["比赛","Android"],"content":"Activity_4_1.class代码 先准备页面的数据 private void initData() { //取出之前fragment页面存在sp里的违章记录 String carwz = InitApp.sp.getString(\"carwz\", null); //将sp取出的字符串数据转换成Carwzs()集合数据 wzlist = InitApp.gson.fromJson(carwz, new TypeToken\u003cArrayList\u003cCarwzs\u003e\u003e() { }.getType()); //循环集合计算每辆车所有违章的罚款和扣分 for (Carwzs carwzs : wzlist) { int pmoney = 0; int pscore = 0; for (Carwz.ROWSDETAILBean bean : carwzs.getROWS_DETAIL()) { CarType.ROWSDETAILBean type = getType(bean.getPcode()); pmoney += type.getPmoney(); pscore += type.getPscore(); } carwzs.setPmoney(pmoney); carwzs.setPscore(pscore); } } ","date":"2021-06-23","objectID":"/%E8%BF%9D%E7%AB%A0%E6%9F%A5%E8%AF%A2/:5:2","tags":["比赛","Android"],"title":" 违章查询","uri":"/%E8%BF%9D%E7%AB%A0%E6%9F%A5%E8%AF%A2/"},{"categories":["比赛","Android"],"content":"getType()方法 private CarType.ROWSDETAILBean getType(String pcode) {//上面传过来的违章代码 List\u003cCarType.ROWSDETAILBean\u003e list = InitApp.gson.fromJson(InitApp.getData(\"cartype\"), CarType.class).getROWS_DETAIL(); for (CarType.ROWSDETAILBean bean : list) { if (pcode.equals(bean.getPcode())) { return bean;//返回对应违章代码的javabean对象 } } return null; } ==不要网了在onstop()方法里存违章记录== @Override protected void onStop() { super.onStop(); //保证这个页面对违章记录的操作有保存 InitApp.edit.putString(\"carwz\", InitApp.gson.toJson(wzlist)).commit(); } ","date":"2021-06-23","objectID":"/%E8%BF%9D%E7%AB%A0%E6%9F%A5%E8%AF%A2/:5:3","tags":["比赛","Android"],"title":" 违章查询","uri":"/%E8%BF%9D%E7%AB%A0%E6%9F%A5%E8%AF%A2/"},{"categories":["比赛","Android"],"content":"initView()初始化控件代码 private void initView() { tv_back = (ImageView) findViewById(R.id.tv_back); tv_title = (TextView) findViewById(R.id.tv_title); im_ref = (ImageView) findViewById(R.id.im_ref); iv_add = (ImageView) findViewById(R.id.iv_add); gv_top = (GridView) findViewById(R.id.gv_top); gv_bottom = (GridView) findViewById(R.id.gv_bottom); tv_back.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { finish(); } }); tv_title.setText(\"查询结果\"); iv_add.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { finish(); } }); //设置GridView参数 setGv(gv_top,wzlist.size()); gv_top.setAdapter(new wzAdapter()); setGv(gv_bottom,wzlist.get(index).getROWS_DETAIL().size()); wzxqAdapter = new WzxqAdapter(); gv_bottom.setAdapter(wzxqAdapter); } ","date":"2021-06-23","objectID":"/%E8%BF%9D%E7%AB%A0%E6%9F%A5%E8%AF%A2/:6:0","tags":["比赛","Android"],"title":" 违章查询","uri":"/%E8%BF%9D%E7%AB%A0%E6%9F%A5%E8%AF%A2/"},{"categories":["比赛","Android"],"content":"setGv()方法 private void setGv(GridView gv, int size) { //设置GridView的条目数 这里的条目数就是对应集合长度 gv.setNumColumns(size); ViewGroup.LayoutParams layoutParams = gv.getLayoutParams(); //设置GridView的宽度 layoutParams.width = 700 * size; gv.setLayoutParams(layoutParams); } ","date":"2021-06-23","objectID":"/%E8%BF%9D%E7%AB%A0%E6%9F%A5%E8%AF%A2/:7:0","tags":["比赛","Android"],"title":" 违章查询","uri":"/%E8%BF%9D%E7%AB%A0%E6%9F%A5%E8%AF%A2/"},{"categories":["比赛","Android"],"content":"汽车资料卡片部分的GridView的适配器 private class wzAdapter extends BaseAdapter { @Override public int getCount() { return wzlist.size(); } @Override public Carwzs getItem(int position) { return wzlist.get(position); } @Override public long getItemId(int position) { return position; } @Override public View getView(final int position, View convertView, ViewGroup parent) { ViewHolder viewHolder; if (convertView == null) { convertView = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_wz, parent, false); viewHolder = new ViewHolder(convertView); convertView.setTag(viewHolder); } else { viewHolder = (ViewHolder) convertView.getTag(); } final Carwzs item = getItem(position); viewHolder.tv_cp.setText(item.getCarnumber()); viewHolder.tv_cl.setText(\"未处理违章\\u3000\" + item.getROWS_DETAIL().size() + \" 次\"); viewHolder.tv_fen.setText(\"扣 \" + item.getPscore() + \" 分\\u3000罚款 \" + item.getPmoney() + \" 元\"); //减号图片点击事件 viewHolder.iv_jian.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { wzlist.remove(position); if (wzlist.size() == 0) { //当查询的违章记录集合长度为0时返回查询页面 finish(); } else { index = 0;//没次删除违章记录默认显示第一个条目的违章详情 //重新设置俩个GridView的条目数和宽度 并刷新数组适配器 setGv(gv_top,wzlist.size()); notifyDataSetChanged(); setGv(gv_bottom,wzlist.get(index).getROWS_DETAIL().size()); wzxqAdapter.notifyDataSetChanged(); } } }); //条目点击事件 convertView.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { index = position; //将设置成对应条目的位置 setGv(gv_bottom,wzlist.get(position).getROWS_DETAIL().size()); wzxqAdapter.notifyDataSetChanged(); } }); return convertView; } class ViewHolder { public View rootView; public TextView tv_cp; public TextView tv_cl; public TextView tv_fen; public ImageView iv_jian; public ViewHolder(View rootView) { this.rootView = rootView; this.tv_cp = (TextView) rootView.findViewById(R.id.tv_cp); this.tv_cl = (TextView) rootView.findViewById(R.id.tv_cl); this.tv_fen = (TextView) rootView.findViewById(R.id.tv_fen); this.iv_jian = (ImageView) rootView.findViewById(R.id.iv_jian); } } } ","date":"2021-06-23","objectID":"/%E8%BF%9D%E7%AB%A0%E6%9F%A5%E8%AF%A2/:8:0","tags":["比赛","Android"],"title":" 违章查询","uri":"/%E8%BF%9D%E7%AB%A0%E6%9F%A5%E8%AF%A2/"},{"categories":["比赛","Android"],"content":"违章详情下的GridView适配器 private class WzxqAdapter extends BaseAdapter { @Override public int getCount() { //根据index取对应的详情数据 return wzlist.get(index).getROWS_DETAIL().size(); } @Override public Carwz.ROWSDETAILBean getItem(int position) { return wzlist.get(index).getROWS_DETAIL().get(position); } @Override public long getItemId(int position) { return position; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder viewHolder; if (convertView == null) { convertView = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_wzxq, parent, false); viewHolder = new ViewHolder(convertView); convertView.setTag(viewHolder); } else { viewHolder = (ViewHolder) convertView.getTag(); } Carwz.ROWSDETAILBean item = getItem(position); viewHolder.tv_time.setText(item.getPdatetime()); viewHolder.tv_paddr.setText(item.getPaddr()); CarType.ROWSDETAILBean type = getType(item.getPcode()); viewHolder.tv_fen.setText(\"扣分： \" + type.getPscore() + \" 分\"); viewHolder.tv_money.setText(\"罚款： \" + type.getPscore() + \" 元\"); viewHolder.tv_premarks.setText(type.getPremarks()); convertView.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { startActivity(new Intent(getApplicationContext(),Activity_4_2.class)); } }); return convertView; } class ViewHolder { public View rootView; public TextView tv_time; public TextView tv_cl; public TextView tv_paddr; public TextView tv_premarks; public TextView tv_fen; public TextView tv_money; public ViewHolder(View rootView) { this.rootView = rootView; this.tv_time = (TextView) rootView.findViewById(R.id.tv_time); this.tv_cl = (TextView) rootView.findViewById(R.id.tv_cl); this.tv_paddr = (TextView) rootView.findViewById(R.id.tv_paddr); this.tv_premarks = (TextView) rootView.findViewById(R.id.tv_premarks); this.tv_fen = (TextView) rootView.findViewById(R.id.tv_fen); this.tv_money = (TextView) rootView.findViewById(R.id.tv_money); } } } 缩放和车辆违章里的大差不差 ","date":"2021-06-23","objectID":"/%E8%BF%9D%E7%AB%A0%E6%9F%A5%E8%AF%A2/:9:0","tags":["比赛","Android"],"title":" 违章查询","uri":"/%E8%BF%9D%E7%AB%A0%E6%9F%A5%E8%AF%A2/"},{"categories":["CSS"],"content":"CSS","date":"2020-11-07","objectID":"/css/","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"CSS基础语法 格式 ： 选择器 { 属性1 : 值1 ; 属性2 : 值2 } 单位 ： 长度单位 ： px —\u003e 像素 % —\u003e 百分比 外容器1 -\u003e 600px 当前容器 50% -\u003e 300px 外容器2 -\u003e 400px 当前容器 50% -\u003e 200px 基本样式 ：  ​ width : 宽 ​ height : 高 ​ background-color : 背景色 CSS注释 ： /*CSS注释的内容*/ ","date":"2020-11-07","objectID":"/css/:1:0","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"CSS样式的引入方式 ","date":"2020-11-07","objectID":"/css/:2:0","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"内联样式 ​ style属性 ","date":"2020-11-07","objectID":"/css/:2:1","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"内部样式 ​ style标签  ​ 区别： ​ 内部样式的代码可以复用、复合W3C的规范标准，进行让结构和样式分开处理 ","date":"2020-11-07","objectID":"/css/:2:2","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"外部样式 引入一个单独的CSS文件，例如：name.css 通过link标签引入外部资源，rel属性指定资源跟页面的关系，href属性资源的地址。 \u003clink rel=\"stylesheet\" href=\"./name.css\"\u003e 通过@import方式引入外部样式 ( 这种方式有很多问题，不建议使用 ) \u003cstyle\u003e@import url('./common.css');\u003c/style\u003e link和@import的区别： 从属关系区别 @import是 CSS 提供的语法规则，只有导入样式表的作用；link是HTML提供的标签，不仅可以加载 CSS 文件，还可以定义 RSS、rel 连接属性等 加载顺序区别 加载页面时，link标签引入的 CSS 被同时加载；@import引入的 CSS 将在页面加载完毕后被加载 兼容性区别 @import是 CSS2.1 才有的语法，故只可在 IE5+ 才能识别；link标签作为 HTML 元素，不存在兼容性问题 DOM可控性区别 可以通过 JS 操作 DOM ，插入link标签来改变样式；由于 DOM 方法是基于文档的，无法使用@import的方式插入样式 ","date":"2020-11-07","objectID":"/css/:2:3","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"CSS中的颜色表示法 单词表示法 ：red blue green yellow 十六进制表示法 ：#000000 #ffffff 0 1 2 3 4 5 6 7 8 9 a b c d e f RGB表示法 ：rgb(255,255,255) 取值范围 0 ~ 255 获取颜色的工具： https://www.baidufe.com/fehelper ","date":"2020-11-07","objectID":"/css/:3:0","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"CSS背景样式 ","date":"2020-11-07","objectID":"/css/:4:0","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":" background-color 背景色 ","date":"2020-11-07","objectID":"/css/:4:1","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"background-image 背景图 url(背景地址) 默认：会水平垂直都铺满背景图 ","date":"2020-11-07","objectID":"/css/:4:2","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"background-repeat 平铺方式 repeat-x x轴平铺 repeat-y y轴平铺 repeat ( x , y 都进行平铺，默认值 ) no-repeat 都不平铺 ","date":"2020-11-07","objectID":"/css/:4:3","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"background-position : 背景位置 x y : number(px、%) | 单词 　x : left、center、right 　y : top、center、bottom ","date":"2020-11-07","objectID":"/css/:4:4","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"background-attachment : 背景图随滚动条移动的方式 scroll : 默认值 ( 背景位置是按照当前元素进行偏移的 ) fixed ： ( 背景位置是按照浏览器进行偏移的 ) 练习 ：利用滚动条移动方式实现视觉差网页（请用PC浏览器查看） ","date":"2020-11-07","objectID":"/css/:4:5","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"CSS边框样式 ","date":"2020-11-07","objectID":"/css/:5:0","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"border-style : 边框样式 solid : 实线 dashed : 虚线 dotted : 点线 ","date":"2020-11-07","objectID":"/css/:5:1","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"border-width : 边框大小 number(px、%) ","date":"2020-11-07","objectID":"/css/:5:2","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"border-color : 边框颜色 red #f00 … 边框也可以针对某一边进行单独设置 : border-left-style : 中间是方向 left、right、top、bottom 颜色：透明颜色 transparent ","date":"2020-11-07","objectID":"/css/:5:3","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"CSS文字样式 ","date":"2020-11-07","objectID":"/css/:6:0","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"font-family : 字体类型 英文字体：例如 ：Arial , ‘Times New Roman’ 中文字体：例如 ：微软雅黑 , 宋体 中文字体都有英文名称 衬线体、非衬线体 衬线字体（宋体）：见名知意，就是比划有粗有细，非衬线字体所以字的所有比划的都是一样粗细（幼圆） 　区别 ： 衬线字体每个字的笔划有粗有细，在连续阅读时流畅性更好 无衬线字体笔划粗细均匀，适用于单词短句 注意 ：如果字体名称出现空格要用引号，如：'Times New Roman' ","date":"2020-11-07","objectID":"/css/:6:1","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"font-size : 字体大小 默认 ：16px 写法 ： number(px) 单词 ( small large … )不推荐使用 属性取值 字体大小 xx-small 最小 x-small 较小 small 小 medium 正常（默认值） large 大 x-large 较大 xx-large 最大 注 ：字体大小一般为偶数 ","date":"2020-11-07","objectID":"/css/:6:2","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"font-weight : 字体粗细 模式 ： 属性值 描述 normal 默认值 定义标准的字符 bold 定义粗体字符 bolder 定义更粗的字符 lighter 定义更细的字符 inherit 规定应该从父元素继承字体的粗细 100~900 定义由粗到细的字符 400 等同于 normal，而 700 等同于 bold 写法 ： 单词 (normal、bold) number ( 100 ….. 900 ） 100到500都是正常的，600都900都是加粗的 ","date":"2020-11-07","objectID":"/css/:6:3","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"font-style : 字体样式 模式 ： 属性值 描述 normal 默认值 浏览器显示一个标准的字体样式 italic 浏览器会显示一个斜体的字体样式 oblique 浏览器会显示一个倾斜的字体样式 inherit 规定应该从父元素继承字体样式 写法：单词 ( normal 、 italic ) 注：oblique也是表示斜体，用的比较少，一般了解即可 区别 ： italic 带有倾斜属性的字体的才可以设置倾斜操作 oblique 没有倾斜属性的字体也可以设置倾斜操作 ","date":"2020-11-07","objectID":"/css/:6:4","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"CSS段落样式 ","date":"2020-11-07","objectID":"/css/:7:0","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"text-decoration：文本装饰 underline ：下划线 line-through ：删除线 overline ：上划线 none ：不添加任何装饰 注：添加多个文本修饰用空格隔开即可,如：line-through underline overline ","date":"2020-11-07","objectID":"/css/:7:1","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"text-transform：文本大小写 （ 针对英文段落 ） lowercase ：小写 uppercase ：大写 capitalize ：只针对首字母大写 ","date":"2020-11-07","objectID":"/css/:7:2","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"text-indent : 文本缩进 em单位：相对单位，1em永远都是跟字体大小相同 ","date":"2020-11-07","objectID":"/css/:7:3","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"text-align : 文本对齐方式 对齐方式 ： 属性值 描述 left 把文本排列到左边。默认值：由浏览器决定 right 把文本排列到右边 center 把文本排列到中间 justify 实现两端对齐文本效果 inherit 规定应该从父元素继承 text-align 属性的值 ","date":"2020-11-07","objectID":"/css/:7:4","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"line-height : 定义行高 默认行高：不是固定值，而是变化的。根据当前字体的大小再不断的变化 取值 ： number( px ) scale ( 比例值 , 跟文字大小成比例的 ) ","date":"2020-11-07","objectID":"/css/:7:5","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"letter-spacing : 字之间的间距 ","date":"2020-11-07","objectID":"/css/:7:6","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"word-spacing : 词之间的间距 ( 针对英文段落的，中文不生效 ) ","date":"2020-11-07","objectID":"/css/:7:7","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"强制折行 : (针对英文) word-break : break-all; (非常强烈的折行) word-wrap : break-word;(不是那么强烈的折行，会产生一些空白区域) ","date":"2020-11-07","objectID":"/css/:7:8","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"CSS复合样式 一个CSS属性只控制一种样式，叫做单一样式 一个CSS属性控制多种样式，叫做复合样式 复合样式 background 例如 ：background : red url() repeat 0 0； border 例如 ：border : 1px red solid; font 注 ： 最少要有两个值 size family 正确写法 ： weight style size family √ style weight size family √ weight style size/line-height family √ 复合的写法，是通过空格的方式实现的。复合写法有的是不需要关心顺序，例如background、border；有的是需要关心顺序，例如font 注：如果非要混合去写的话，那么要先写复合样式，再写单一样式，这样样式才不会被覆盖掉。 ","date":"2020-11-07","objectID":"/css/:8:0","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"CSS选择器 ","date":"2020-11-07","objectID":"/css/:9:0","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"ID 选择器 　写法 ： css : #elem{} html : id=“elem” 注： ID是唯一值，在一个页面中只能出现一次，出现多次是不符合规范的 命名的规范，由字母、下划线、中划线、字母（并且第一个不能是数字） 驼峰写法 : searchButton (小驼峰) SearchButton (大驼峰) searchSmallButton 短线写法：search-small-button 下划线写法：search_small_button ","date":"2020-11-07","objectID":"/css/:9:1","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"CLASS 选择器 　写法 ： css : .elem{} html : class =“elem” 注： class选择器是可以复用的 可以添加多个class样式 多个样式的时候，样式的优先级根据CSS中的顺序决定，而不是class属性中的顺序 标签+类的写法 ","date":"2020-11-07","objectID":"/css/:9:2","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"标签选择器(TAG选择器) 　写法 ： css : div{} html : \u003cdiv\u003e 使用的场景： 去掉某些标签的默认样式时 复杂的选择器中，如 层次选择器 ","date":"2020-11-07","objectID":"/css/:9:3","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"群组选择器(分组选择器) 　写法 ： css : div , p , span{} ","date":"2020-11-07","objectID":"/css/:9:4","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"通配选择器 　写法 ： css : *{} 注：尽量避免使用通配选择器，因为会给所有的标签添加样式，慎用 使用的场景： 去掉所有标签的默认样式时 ","date":"2020-11-07","objectID":"/css/:9:5","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"层次选择器 后代 ：M N { } （所有的后代都会被设置） 父子 ：M \u003e N { } （只有孩子会被设置，孩子的孩子不受影响） 兄弟 ： M ~ N { } 当前M下面的所有兄弟N标签 相邻 ： M + N { } 当前M下面相邻的N标签 ","date":"2020-11-07","objectID":"/css/:9:6","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"属性选择器 attr 属性 选择器 说明 M[attr] M元素选择指定为attr属性的集合 M[attr=value] M元素选择指定为attr属性和value值的集合 （完全匹配） M[attr*=value] M元素选择指定为attr属性并且包含值为value的集合 (部分匹配) M[attr^=value] M元素选择指定为attr属性并且起始值为value的集合 (起始匹配) M[attr$=value] M元素选择指定为attr属性并且结束值为value的集合 (结束匹配) M[attr1][attr2] M元素选择满足多个属性的集合 (组合匹配) ","date":"2020-11-07","objectID":"/css/:9:7","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"伪类选择器 　写法 ：M:伪类{} 伪类 说明 :link 访问前的样式 ( 只能添加给a标签 ) :visited 访问后的样式 ( 只能添加给a标签 ) :hover 鼠标移入时的样式 (可以添加给所有的标签) :active 鼠标按下时的样式 (可以添加给所有的标签) 注： link visited 只能给a标签加，hover和active 可以给所有的标签加 如果四个伪类都生效，一定要注意顺序 : L V H A 一般网站只这样去设置：a{} a:hover{} 结构性伪类选择器 伪类选择器 说明 first-child 单独指定第一个子元素的样式 last-child 单独指定最后一个子元素的样式 nth-child(n) 选择器匹配正数下来的第N个子元素 nth-child(odd)为第奇数个子元素 nth-child(even)为第偶数个子元素 nth-last-child(n) 匹配倒数数下来第n个子元素 nth-of-type(n) 选择器匹配属于父元素的特定类型的第 N 个子元素的每个元素 nth-last-of-type(n) 择器匹配属于父元素的特定类型的第 N 个子元素的每个元素 从最后一个子元素开始计数 first-of-type 选择器匹配元素其父级是特定类型的第一个子元素 last-of-type 选择器匹配元素其父级是特定类型的最后一个子元素 only-of-type 代表了任意一个元素，这个元素没有其他相同类型的兄弟元素 n 可以是数字、关键词或公式 ","date":"2020-11-07","objectID":"/css/:9:8","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"CSS样式继承 文字相关的样式可以被继承 布局相关的样式不能被继承（默认是不能继承的，但是可以设置继承属性 inherit 值） ","date":"2020-11-07","objectID":"/css/:10:0","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"CSS优先级 ","date":"2020-11-07","objectID":"/css/:11:0","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"相同样式优先级 　当设置相同样式时，后面的优先级较高，但不建议出现重复设置样式的情况 ","date":"2020-11-07","objectID":"/css/:11:1","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"内部样式与外部样式 　内部样式与外部样式优先级相同，如果都设置了相同样式，那么后写的引入方式优先级高 ","date":"2020-11-07","objectID":"/css/:11:2","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"单一样式优先级 　style行间 \u003e id \u003e class \u003e tag \u003e * \u003e 继承 注 ： style行间 权重 1000 id 权重 100 class 权重 10 tag 权重 1 ","date":"2020-11-07","objectID":"/css/:11:3","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"!important 　提升样式优先级，非规范方式，不建议使用。( 不能针对继承的属性进行优先级的提升 ) ","date":"2020-11-07","objectID":"/css/:11:4","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"标签+类与单类 　标签+类 \u003e 单类 ","date":"2020-11-07","objectID":"/css/:11:5","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"CSS盒子模型 ​ 组成 : content —\u003e padding —\u003e border —\u003e margin 　物品　填充物　包装盒　盒子与盒子之间的间距 content : 内容区域 width和height组成的 padding : 内边距(内填充) 只写一个值： 30px (上下左右) 写两个值 : 30px 40px ( 上下、左右 ) 写四个值 : 30px 40px 50px 60px（上、右、下、左） 单一样式只能写一个值： padding-left padding-right padding-top padding-bottom margin : 外边距(外填充) 只写一个值： 30px (上下左右) 写两个值 : 30px 40px ( 上下、左右 ) 写四个值 : 30px 40px 50px 60px（上、右、下、左） 单一样式只能写一个值： margin-left margin-right margin-top margin-bottom 注 ： 背景色填充到margin以内的区域 （不包括margin区域） 文字在content区域添加 padding不能为负数，而margin可以为负数 ","date":"2020-11-07","objectID":"/css/:12:0","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"box-sizing 盒尺寸：可以改变盒子模型的展示形态 默认值： content-box 属性值 说明 content-box 标准盒模型，又叫做 W3C盒模型 一般在现代浏览器中使用的都是这个盒模型 padding和border不被包含在定义的width和height之内。盒子的实际宽度=设置的width+padding+border border-box 怪异盒模型 低版本IE浏览器中的盒模型 padding和border被包含在定义的width和height之内。盒子的实际宽度=设置的width（padding和border不会影响实际宽度） 使用的场景： 不用再去计算一些值 解决一些百分比%的问题 ","date":"2020-11-07","objectID":"/css/:12:1","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"盒子模型的一些问题 margin叠加问题，出现在上下margin同时存在的时候。会取上下中值较大的作为叠加的值 解决方案 ： BFC规范 想办法只给一个元素添加间距 margin传递问题，出现在嵌套的结构中，只是针对margin-top的问题 解决方案 ： BFC规范 给父容器加边框 margin换成padding ","date":"2020-11-07","objectID":"/css/:12:2","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"拓展 margin左右自适应是可以的 ，但是上下自适应是不行的 width、height不设置的时候，会自动去计算容器的大小，节省代码 ","date":"2020-11-07","objectID":"/css/:12:3","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"标签分类 按类型 block 块元素 div、p、h1...h6、ol、ul、dl、table、address、blockquote、form 独占一行 支持所有样式 不写宽的时候，跟父元素的宽相同 所占区域是一个矩形 inline 内联元素 span 、a、em、strong、img … 挨在一起的 有些样式不支持，例如：width、height、margin、padding 不写宽的时候，宽度由内容决定 所占的区域不一定是矩形 内联标签之间会有空隙，原因：代码换行产生的 inline-block 内联块级元素 input、select … 挨在一起，但是支持宽高 注：布局一般用块标签，修饰文本一般用内联标签 按内容 svg { font: bold 18px sans-serif; text-anchor: middle; }\rellipse { fill: #3c790a; stroke: #000000; opacity: 0.67; }\rtext { fill: #ffffff; pointer-events: none; }\rellipse:hover { stroke-width: 6px;}\rellipse:not(:hover) + foreignObject { display: none; }\rforeignObject div { font: 14px sans-serif; }\rforeignObject h1 { margin: 0 0 0.25em 0; padding: 0; font: 900 27px sans-serif; }\rforeignObject ul { margin: 0; padding: 0 0 0 1em; }\rforeignObject li { display: inline; margin: 0; padding: 0; line-height: 1.5; }\rforeignObject li:not(:last-child):after { content: ', '; }\rforeignObject span { font: italic 14px sans-serif; }\rforeignObject code { font: 1em monospace; color: orangered; }\rforeignObject p { margin: 0.75em 0 0 0; padding: 0 0 0 1em; font: italic 14px sans-serif; }\r\rFlow content\r\ra\rabbr\raddress\rarea*\rarticle\raside\raudio\rb\rbdi\rbdo\rblockquote\rbr\rbutton\rcanvas\rcite\rcode\rdata\rdate\rdatalist\rdel\rdetails\rdfn\rdialog\rdiv\rdl\rem\rembed\rfieldset\rfigure\rfooter\rform\rh1\rh2\rh3\rh4\rh5\rh6\rheader\rhgroup\rhr\ri\riframe\rimg\rinput\rins\rkbd\rkeygen\rlabel\rlink*\rmain*\rmap\rmark\rmath\rmenu\rmeta*\rmeter\rnav\rnoscript\robject\rol\routput\rp\rpicture\rpre\rprogress\rq\rruby\rs\rsamp\rscript\rsection\rselect\rslot\rsmall\rspan\rstrong\rsub\rsup\rsvg\rtable\rtemplate\rtextarea\rtime\ru\rul\rvar\rvideo\rwbr\rautonomous custom elements\rText*\r\r* Under certain circumstances (see prose). \r\rFlow\r\rHeading content\r\rh1\rh2\rh3\rh4\rh5\rh6\rhgroup\r\r\r\rHeading\r\rSectioning content\r\rarticle\raside\rnav\rsection\r\r\r\rSectioning\r\rMetadata content\r\rbase\rlink\rmeta\rnoscript\rscript\rstyle\rtemplate\rtitle\r\r\r\rMetadata\r\rInteractive content\r\ra*\raudio*\rbutton\rdetails\rembed\riframe\rimg*\rinput*\rkeygen\rlabel\robject*\rselect\rtextarea\rvideo*\r\r* Under certain circumstances. \r\rInteractive\r\rPhrasing content\r\ra*\rabbr\rarea*\raudio\rb\rbdi\rbdo\rbr\rbutton\rcanvas\rcite\rcode\rdata\rdate\rdatalist\rdel*\rdfn\rem\rembed\ri\riframe\rimg\rinput\rins*\rkbd\rkeygen\rlabel\rlink*\rmap*\rmark\rmath\rmeta*\rmeter\rnoscript\robject\routput\rpicture\rprogress\rq\rruby\rs\rsamp\rscript\rselect\rslot\rsmall\rspan\rstrong\rsub\rsup\rsvg\rtemplate\rtextarea\rtime\ru\rvar\rvideo\rwbr\rautonomous custom elements\rText*\r\r* Under certain circumstances; see prose. \r\rPhrasing\r\rEmbedded content\r\raudio\rcanvas\rembed\riframe\rimg\rmath\robject\rpicture\rsvg\rvideo\r\r\r\rEmbedded\r\r\r\rFlow：流内容 Metadata：元数据 Sectioning：分区 Heading：标题 Phrasing：措辞 Embedded：嵌入的 Interactive：互动的 按显示 替换元素 ：浏览器根据元素的标签和属性，来决定元素的具体显示内容 img、input … 非替换元素 : 将内容直接告诉浏览器，将其显示出来 div、h1、p … ","date":"2020-11-07","objectID":"/css/:13:0","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"显示框类型 ​ display block inline inline-block none .... display:none 不占空间的隐藏 visibility: hidden 占空间的隐藏 ","date":"2020-11-07","objectID":"/css/:14:0","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"标签嵌套规范 块标签可以嵌套内联标签 例 ： \u003cdiv\u003e \u003cspan\u003e\u003c/span\u003e \u003ca href=\"#\"\u003e\u003c/a\u003e \u003c/div\u003e 块标签不一定能嵌套块标签 例 ： \u003cdiv\u003e \u003cdiv\u003e\u003c/div\u003e \u003c/div\u003e 特殊： p标签只能嵌套内联样式不能嵌套块 错误的写法： \u003cp\u003e \u003cdiv\u003e\u003c/div\u003e \u003c/p\u003e 内联标签不能嵌套块标签 例 ： 错误的写法： \u003cspan\u003e \u003cdiv\u003e\u003c/div\u003e \u003c/span\u003e 特殊： a标签是一个例外 正确的写法： \u003ca href=\"#\"\u003e \u003cdiv\u003e\u003c/div\u003e \u003c/a\u003e ","date":"2020-11-07","objectID":"/css/:15:0","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"溢出隐藏 overflow : 属性值 说明 visible 默认值。内容不会被修剪，会呈现在元素框之外 hidden 内容会被修剪，并且其余内容是不可见的 scroll 内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容 auto 如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容 inherit 规定应该从父元素继承 overflow 属性的值 x轴、y轴 overflow-x、overflow-y针对两个轴分别设置 ","date":"2020-11-07","objectID":"/css/:16:0","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"透明度与手势 opacity 0(透明) ~ 1(不透明) 0.5(半透明) 注：占空间、所有的子内容也会透明 rgba rgba(255,255,255,0)** 最后一个参数代表透明度 ：0 ~ 1 注：可以让指定的样式透明，而不影响其他样式 cursor (手势) default : 默认箭头 (默认值） 值 描述 url 需使用的自定义光标的 URL 注释：请在此列表的末端始终定义一种普通的光标，以防没有由 URL 定义的可用光标 default 默认光标（通常是一个箭头） auto 默认。浏览器设置的光标 crosshair 光标呈现为十字线 pointer 光标呈现为指示链接的指针（一只手） move 此光标指示某对象可被移动 e-resize 此光标指示矩形框的边缘可被向右（东）移动 ne-resize 此光标指示矩形框的边缘可被向上及向右移动（北/东） nw-resize 此光标指示矩形框的边缘可被向上及向左移动（北/西） n-resize 此光标指示矩形框的边缘可被向上（北）移动 se-resize 此光标指示矩形框的边缘可被向下及向右移动（南/东） sw-resize 此光标指示矩形框的边缘可被向下及向左移动（南/西） s-resize 此光标指示矩形框的边缘可被向下移动（南） w-resize 此光标指示矩形框的边缘可被向左移动（西） text 此光标指示文本 wait 此光标指示程序正忙（通常是一只表或沙漏） help 此光标指示可用的帮助（通常是一个问号或一个气球） 要实现自定义手势： 准备图片： .cur 、 .ico (图片格式) cursor : url(./img/cursor.ico),auto; ","date":"2020-11-07","objectID":"/css/:17:0","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"CSS默认样式 有些标签有默认样式，有些标签没有默认样式 没有默认样式 div、span、… 有默认样式 标签 默认样式 body marign : 8px h1 margin : 上下 21.440px font-weight : bold p margin : 上下 16px ul margin : 上下 16px padding : 左 40px 默认点：list-style : disc a text-decoration: underline; ","date":"2020-11-07","objectID":"/css/:18:0","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"CSS reset ","date":"2020-11-07","objectID":"/css/:19:0","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"reset.css /** * Eric Meyer's Reset CSS v2.0 (http://meyerweb.com/eric/tools/css/reset/) * http://cssreset.com */ html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video{ margin: 0; padding: 0; border: 0; font-size: 100%; font: inherit; font-weight: normal; vertical-align: baseline; } /* HTML5 display-role reset for older browsers */ article, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section{ display: block; } ol, ul, li{ list-style: none; } blockquote, q{ quotes: none; } blockquote:before, blockquote:after, q:before, q:after{ content: ''; content: none; } table{ border-collapse: collapse; border-spacing: 0; } /* custom */ a{ color: #7e8c8d; text-decoration: none; -webkit-backface-visibility: hidden; } ::-webkit-scrollbar{ width: 5px; height: 5px; } ::-webkit-scrollbar-track-piece{ background-color: rgba(0, 0, 0, 0.2); -webkit-border-radius: 6px; } ::-webkit-scrollbar-thumb:vertical{ height: 5px; background-color: rgba(125, 125, 125, 0.7); -webkit-border-radius: 6px; } ::-webkit-scrollbar-thumb:horizontal{ width: 5px; background-color: rgba(125, 125, 125, 0.7); -webkit-border-radius: 6px; } html, body{ width: 100%; font-family: \"Arial\", \"Microsoft YaHei\", \"黑体\", \"宋体\", \"微软雅黑\", sans-serif; } body{ line-height: 1; -webkit-text-size-adjust: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); } html{ overflow-y: scroll; } /*清除浮动*/ .clearfix:before, .clearfix:after{ content: \" \"; display: inline-block; height: 0; clear: both; visibility: hidden; } .clearfix{ *zoom: 1; } /*隐藏*/ .dn{ display: none; } ","date":"2020-11-07","objectID":"/css/:19:1","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"腾讯 body,ol,ul,h1,h2,h3,h4,h5,h6,p,th,td,dl,dd,form,fieldset,legend,input,textarea,select{margin:0;padding:0} body{font:12px\"宋体\",\"Arial Narrow\",HELVETICA;background:#fff;-webkit-text-size-adjust:100%;} a{color:#2d374b;text-decoration:none} a:hover{color:#cd0200;text-decoration:underline} em{font-style:normal} li{list-style:none} img{border:0;vertical-align:middle} table{border-collapse:collapse;border-spacing:0} p{word-wrap:break-word} ","date":"2020-11-07","objectID":"/css/:19:2","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"新浪 body,ul,ol,li,p,h1,h2,h3,h4,h5,h6,form,fieldset,table,td,img,div{margin:0;padding:0;border:0;} body{background:#fff;color:#333;font-size:12px; margin-top:5px;font-family:\"SimSun\",\"宋体\",\"Arial Narrow\";} ul,ol{list-style-type:none;} select,input,img,select{vertical-align:middle;} a{text-decoration:none;} a:link{color:#009;} a:visited{color:#800080;} a:hover,a:active,a:focus{color:#c00;text-decoration:underline;} ","date":"2020-11-07","objectID":"/css/:19:3","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"淘宝 body, h1, h2, h3, h4, h5, h6, hr, p, blockquote, dl, dt, dd, ul, ol, li, pre, form, fieldset, legend, button, input, textarea, th, td { margin:0; padding:0; } body, button, input, select, textarea { font:12px/1.5tahoma, arial, \\5b8b\\4f53; } h1, h2, h3, h4, h5, h6{ font-size:100%; } address, cite, dfn, em, var { font-style:normal; } code, kbd, pre, samp { font-family:couriernew, courier, monospace; } small{ font-size:12px; } ul, ol { list-style:none; } a { text-decoration:none; } a:hover { text-decoration:underline; } sup { vertical-align:text-top; } sub{ vertical-align:text-bottom; } legend { color:#000; } fieldset, img { border:0; } button, input, select, textarea { font-size:100%; } table { border-collapse:collapse; border-spacing:0; } ","date":"2020-11-07","objectID":"/css/:19:4","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"雅虎 body,div,dl,dt,dd,ul,ol,li,h1,h2,h3,h4,h5,h6,pre,code,form,fieldset,legend,input,button,textarea,p,blockquote,th,td { margin:0; padding:0; } body { background:#fff; color:#555; font-size:14px; font-family: \"Arial\",\"Microsoft YaHei\",\"黑体\",\"宋体\",sans-serif; } td,th,caption { font-size:14px; } h1, h2, h3, h4, h5, h6 { font-weight:normal; font-size:100%; } address, caption, cite, code, dfn, em, strong, th, var { font-style:normal; font-weight:normal;} a { color:#555; text-decoration:none; } a:hover { text-decoration:underline; } img { border:none; } ol,ul,li { list-style:none; } input, textarea, select, button { font:14px \"Arial\",\"Microsoft YaHei\",\"黑体\",\"宋体\",sans-serif; } table { border-collapse:collapse; } html {overflow-y: scroll;} .clearfix:after {content: \".\"; display: block; height:0; clear:both; visibility: hidden;} .clearfix { *zoom:1; }/*公共类*/ .fl { float:left} .fr {float:right} .al {text-align:left} .ac {text-align:center} .ar {text-align:right} .hide {display:none} ","date":"2020-11-07","objectID":"/css/:19:5","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"网易 html {overflow-y:scroll;} body {margin:0; padding:29px00; font:12px\"\\5B8B\\4F53\",sans-serif;background:#ffffff;} div,dl,dt,dd,ul,ol,li,h1,h2,h3,h4,h5,h6,pre,form,fieldset,input,textarea,blockquote,p{padding:0; margin:0;} table,td,tr,th{font-size:12px;} li{list-style-type:none;} img{vertical-align:top;border:0;} ol,ul {list-style:none;} h1,h2,h3,h4,h5,h6{font-size:12px; font-weight:normal;} address,cite,code,em,th {font-weight:normal; font-style:normal;} 可参考 ：reser.css ","date":"2020-11-07","objectID":"/css/:19:6","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"Float浮动 ","date":"2020-11-07","objectID":"/css/:20:0","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"float特性 加浮动的元素，会脱离文档流，会延迟父容器靠左或靠右排列，如果之前已经有浮动的元素，会挨着浮动的元素进行排列 ","date":"2020-11-07","objectID":"/css/:20:1","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"float取值 left ：元素向左浮动 right ：元素向右浮动 none ：默认值。元素不浮动，并会显示在其在文本中出现的位置 ","date":"2020-11-07","objectID":"/css/:20:2","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"float注意点 只会影响后面的元素 内容默认提升半层 （可以利用这个特点做图文混排） 加了浮动元素默认宽度根据内容决定 换行排列 主要给块元素添加，但也可以给内联元素添加 ","date":"2020-11-07","objectID":"/css/:20:3","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"如何清除浮动 上下排列 ：clear属性（表示清除浮动的） 属性值 ： left ： 在左侧不允许浮动元素 right ： 在右侧不允许浮动元素 both ： 在左右两侧均不允许浮动元素 none ：默认值。允许浮动元素出现在两侧 inherit ：规定应该从父元素继承 clear 属性的值 clear属性只会操作块标签，对内联标签不起作用 嵌套排列 ： 固定父元素宽高 ：不推荐 , 不能把高度固定死，不适合做自适应的效果 父元素浮动 ：不推荐 , 因为父容器浮动也会影响到后面的元素 overflow : hidden (BFC规范) , 如果有子元素想溢出，那么会受到影响 display : inline-block (BFC规范)，不推荐，父容器会影响到后面的元素 设置空标签 : 不推荐 , 会多添加一个标签 after伪类 : 推荐，是空标签的加强版，目前各大公司的做法 ","date":"2020-11-07","objectID":"/css/:20:4","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"position 定位 position特性 css position属性用于指定一个元素在文档中的定位方式。top、right、bottom、left 属性则决定了该元素的最终位置 ","date":"2020-11-07","objectID":"/css/:21:0","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"position取值 static（默认） relative相对定位 如果没有定位偏移量，对元素本身没有任何影响 不使元素脱离文档流 不影响其他元素布局 left、top、right、bottom是相对于当前元素自身进行偏移的 ","date":"2020-11-07","objectID":"/css/:21:1","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["CSS"],"content":"absolute绝对定位 ","date":"2020-11-07","objectID":"/css/:22:0","tags":["CSS"],"title":"CSS","uri":"/css/"},{"categories":["HTML"],"content":"HTML","date":"2020-11-07","objectID":"/html/","tags":["HTML"],"title":"HTML","uri":"/html/"},{"categories":["HTML"],"content":"HTML基本结构和属性 ​ HTML ： 超文本 标记 语言 超文本 : 文本内容 + 非文本内容 ( 图片、视频、音频等 ) 标记 : \u003c单词\u003e 语言 : 编程语言 标记也叫做标签： \u003cheader\u003e \u003cfooter\u003e 写法分成两种： 单标签 \u003cheader\u003e 双标签 \u003cheader\u003e\u003c/header\u003e 创建标签的快捷键：单词 + tab键 -\u003e \u003c单词\u003e 标签是可以上下排列，也可以组合嵌套。 HTML常见标签：http://www.html5star.com/manual/html5label-meaning/ 标签的属性：来修饰标签的，设置当前标签的一些功能。 \u003c标签 属性=\"值\" 属性2=\"值2\"\u003e ","date":"2020-11-07","objectID":"/html/:1:0","tags":["HTML"],"title":"HTML","uri":"/html/"},{"categories":["HTML"],"content":"HTML初始代码 每个.html文件都有的代码叫做初始代码 ， 要复合html文件的规范写法。 ! + tab键 : 快速的创建html的初始代码 \u003c!DOCTYPE html\u003e //文档声明 : 告诉浏览器这是一个html文件 \u003chtml lang=\"en\"\u003e //html文件的最外层标签：包裹着所有html标签代码 lang=\"en\"表示是一个英文网站 lang=\"zh-CN\"表示一个中文网站 \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e //元信息：是编写网页中的一些辅助信息 charset=\"UTF-8\"国际编码，让网页不出现乱码的情况 \u003ctitle\u003eDocument\u003c/title\u003e //设置网页的标题 \u003c/head\u003e \u003cbody\u003e 显示网页内容的区域 \u003c/body\u003e \u003c/html\u003e ","date":"2020-11-07","objectID":"/html/:2:0","tags":["HTML"],"title":"HTML","uri":"/html/"},{"categories":["HTML"],"content":"HTML注释 写法：\u003c!-- 注释的内容 --\u003e 在浏览器中看不到，只能在代码中看到注释的内容。 意义： 把暂时不用的代码注释起来，方便以后使用。 开发人员进行提示。 快捷添加注释与删除注释： ctrl + / shift + alt + a ","date":"2020-11-07","objectID":"/html/:3:0","tags":["HTML"],"title":"HTML","uri":"/html/"},{"categories":["HTML"],"content":"标题与段落 标题 -\u003e 双标签 : \u003ch1\u003e\u003c/h1\u003e … \u003ch6\u003e\u003c/h6\u003e 在一个网页中，h1标题最重要，并且一个.html文件中只能出现一次h1标签。 h5、h6标签在网页中不经常使用。 段落 -\u003e 双标签 : \u003cp\u003e\u003c/p\u003e ","date":"2020-11-07","objectID":"/html/:4:0","tags":["HTML"],"title":"HTML","uri":"/html/"},{"categories":["HTML"],"content":"文本修饰标签 强调 -\u003e 双标签 : \u003cstrong\u003e\u003c/strong\u003e ​\u003cem\u003e\u003c/em\u003e 区别： 写法和展示效果是有区别的，一个加粗、一个斜体 strong的强调性更强，em的强调性稍弱。 下标 : \u003csub\u003e\u003c/sub\u003e ​上标 : \u003csup\u003e\u003c/sup\u003e 删除文本 : \u003cdel\u003e\u003c/del\u003e ​插入文本 : \u003cins\u003e\u003c/ins\u003e ​ 注：一般情况下，删除文本都是和插入文本配合使用的。 ","date":"2020-11-07","objectID":"/html/:5:0","tags":["HTML"],"title":"HTML","uri":"/html/"},{"categories":["HTML"],"content":"图片标签 \u003cimg\u003e —\u003e 单标签 src : 引入图片的地址。 alt : 当图片出现问题的时候，可以显示一段友好的提示文字。 title : 提示信息 width、height : 图片的大小 ","date":"2020-11-07","objectID":"/html/:6:0","tags":["HTML"],"title":"HTML","uri":"/html/"},{"categories":["HTML"],"content":"链接标签 a —\u003e 双标签 \u003ca\u003e\u003c/a\u003e href : 链接地址 target : 可以改变链接打开的方式，默认情况下：在当前页面打开 _self 新窗口打开 _blank \u003cbase\u003e —\u003e 单标签 ：作用是改变链接的默认行为的 ​ （一般写在\u003chead\u003e中） ","date":"2020-11-07","objectID":"/html/:7:0","tags":["HTML"],"title":"HTML","uri":"/html/"},{"categories":["HTML"],"content":"锚点 两种做法 #号 + id属性 #号 + name属性（注意name属性加给的是a标签） ","date":"2020-11-07","objectID":"/html/:8:0","tags":["HTML"],"title":"HTML","uri":"/html/"},{"categories":["HTML"],"content":"特殊字符 特殊字符 含义 特殊字符代码 空格符 \u0026nbsp; © 版权 \u0026copy; ® 注册商标 \u0026reg; ＜ 小于号 \u0026lt; ＞ 大于号 \u0026gt; \u0026 和号 \u0026amp; ￥ 人民币 \u0026yen; ° 摄氏度 \u0026deg; ","date":"2020-11-07","objectID":"/html/:9:0","tags":["HTML"],"title":"HTML","uri":"/html/"},{"categories":["HTML"],"content":"列表标签 无序列表 —\u003e ul li 符合嵌套的规范 有序列表 —\u003e ol li 一般用的比较少，可以用无序列表来实现 定义列表 —\u003e dl dt dd 列表项需要添加标题和对标题进行描述的内容 ​ 注：列表之间可以互相嵌套，形成多层级的列表 ","date":"2020-11-07","objectID":"/html/:10:0","tags":["HTML"],"title":"HTML","uri":"/html/"},{"categories":["HTML"],"content":"表格标签 \u003ctable\u003e ：表格的最外层容器 \u003ctr\u003e ：定义表格行 \u003cth\u003e ：定义表头 \u003ctd\u003e ：定义表格单元 \u003ccaption\u003e ：定义表格标题 注：上面属性是有嵌套关系的，要符合嵌套规范。 ​ 语义化标签：tHead、tBody、tFood ​ 注：在一个table中，tBody是可以出现多次的，但是tHead、tFood只能出现一次。 ","date":"2020-11-07","objectID":"/html/:11:0","tags":["HTML"],"title":"HTML","uri":"/html/"},{"categories":["HTML"],"content":"表格属性 border ：表格边框 cellpadding ：单元格内的空间 cellspacing ：单元格之间的空间 rowspan ：合并行 colspan : 合并列 align ：左右对齐方式 valign ：上下对齐方式 表格信息展示小案例 ","date":"2020-11-07","objectID":"/html/:11:1","tags":["HTML"],"title":"HTML","uri":"/html/"},{"categories":["HTML"],"content":"表单标签 ","date":"2020-11-07","objectID":"/html/:12:0","tags":["HTML"],"title":"HTML","uri":"/html/"},{"categories":["HTML"],"content":"表单元素 \u003cform\u003e ：表单的最外层容器 \u003cinput\u003e —\u003e单标签 ：标签用于搜集用户信息，根据不同的type属性值，展示不同的控件，如输入框、密码框、复选框等。 type属性 含义 text 普通的文本输入框 password 密码输入框 checkbox 复选框 radio 单选框 file 上传文件 submit 提交按钮 reset 重置按钮 color 选择颜色的控件 date 选择年月日的控件 datetime 定义一个日期和时间控制器（本地时间 datetime-local 选择一个日期和时间 (无时区) month 选择一个月份 search input会呈现为搜索框（与text类型的唯一区别在于当鼠标覆盖时尾部出现叉号可快速清除输入的内容） tel 编辑电话号码的控件，提交时换行符会自动从输入框中去掉 url 编辑url的控件，提交时换行符与首位的空格都将自动去除 email 可输入一个邮件地址 number 数值的输入域,例如\u003cinput type=\"number\" min=\"1\" max=\"5\"\u003e \u003ctextarea\u003e ：多行文本框 \u003cselect\u003e、\u003coption\u003e ：下拉菜单，select为下拉列表、option为下拉列表中的选项 \u003clabel\u003e ：辅助表单，如输入框前的文字，用以关联用户的选择 button ：定义一个按钮 legend ：定义域的标题，即边框上的文字 fieldset ：定义域。即输入区加有文字的边框 ","date":"2020-11-07","objectID":"/html/:12:1","tags":["HTML"],"title":"HTML","uri":"/html/"},{"categories":["HTML"],"content":"表单常用属性 属性 含义 placeholder 背景字 maxlength 最大长度 minlength 最小长度 checked 单选,复选的默认选中 selected 下拉框默认选中 readonly 只读, 只能看不能改, 能够提交给服务器 disabled 禁用, 只能看不能改, 不能提交给服务器 autofocus 自动获取光标 autocomplete 自动提示 值: on 或 off multiple 多选(文件) required 不能为空 \u003cform action=\"demo.php\"\u003e \u003cinput type=\"text\" name=\"name\" placeholder=\"your tel\"\u003e \u003cbr\u003e \u003cinput type=\"text\" name=\"pwd\" minlength=\"6\" maxlength=\"10\"\u003e \u003cbr\u003e \u003clabel\u003e\u003cinput type=\"radio\" name=\"sex\" value=\"1\"\u003e 男\u003c/label\u003e \u003clabel\u003e\u003cinput type=\"radio\" name=\"sex\" value=\"2\" checked\u003e 女\u003c/label\u003e \u003cbr\u003e \u003cselect name=\"address\"\u003e \u003coption value=\"1\"\u003e 地球 \u003c/option\u003e \u003coption value=\"2\"\u003e 火星 \u003c/option\u003e \u003coption value=\"3\"\u003e 阿联酋 \u003c/option\u003e \u003coption value=\"4\"\u003e 泰坦星 \u003c/option\u003e \u003coption value=\"5\"\u003e 埃塞俄比亚 \u003c/option\u003e \u003coption value=\"6\" selected\u003e 亚欧尼亚 \u003c/option\u003e \u003coption value=\"7\"\u003e 铁岭 \u003c/option\u003e \u003coption value=\"8\"\u003e 四平 \u003c/option\u003e \u003c/select\u003e \u003cbr\u003e \u003cinput type=\"text\" name=\"a\" value=\"这是只读\" readonly\u003e \u003cinput type=\"text\" name=\"b\" value=\"这是禁用\" disabled\u003e \u003cbr\u003e \u003cinput type=\"text\" autofocus\u003e \u003cbr\u003e \u003cinput type=\"text\" name=\"tel\" maxlength=\"11\" autocomplete=\"Off\"\u003e \u003cbr\u003e \u003c!-- 单选文件 --\u003e \u003cinput type=\"file\"\u003e \u003c!-- 多选文件 注意: 添加属性 multiple 才能实现多选 给name值补上[], 才能真正选择多个文件 --\u003e \u003cinput type=\"file\" name=\"photo[]\" multiple\u003e \u003cbr\u003e \u003cinput type=\"password\" name=\"passwd\" required\u003e \u003cbr\u003e \u003cinput type=\"submit\"\u003e \u003c/form\u003e ","date":"2020-11-07","objectID":"/html/:12:2","tags":["HTML"],"title":"HTML","uri":"/html/"},{"categories":["HTML"],"content":"div和span div ：做一个区域划分的块 span ：对文字进行修饰的内联 ","date":"2020-11-07","objectID":"/html/:13:0","tags":["HTML"],"title":"HTML","uri":"/html/"},{"categories":["比赛","Android"],"content":"轮播图","date":"2020-10-05","objectID":"/%E8%BD%AE%E6%92%AD%E5%9B%BE/","tags":["比赛","Android"],"title":" 轮播图","uri":"/%E8%BD%AE%E6%92%AD%E5%9B%BE/"},{"categories":["比赛","Android"],"content":" public class FragmentLunBo extends Fragment { private ImageView iv_left; private LinearLayout points; private ImageView iv_right; private boolean isTouch; private ViewPager lunbo; private Timer timer; //四张轮播的图片 private ArrayList\u003cInteger\u003e imgs = new ArrayList\u003cInteger\u003e() {{ add(R.drawable.lunb1); add(R.drawable.lunb2); add(R.drawable.lunb3); add(R.drawable.lunb4); }}; @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { View view = inflater .inflate(R.layout.fragment_lunbo, container, false); initView(view); //初始化控件 return view; } public void initView(View rootView) { isTouch = true; timer = new Timer(); this.iv_left = (ImageView) rootView.findViewById(R.id.iv_left); this.points = (LinearLayout) rootView.findViewById(R.id.points); this.iv_right = (ImageView) rootView.findViewById(R.id.iv_right); this.lunbo = (ViewPager) rootView.findViewById(R.id.lunbo); //.....//详细代码下面分段解释 } ","date":"2020-10-05","objectID":"/%E8%BD%AE%E6%92%AD%E5%9B%BE/:0:0","tags":["比赛","Android"],"title":" 轮播图","uri":"/%E8%BD%AE%E6%92%AD%E5%9B%BE/"},{"categories":["比赛","Android"],"content":"控件数据初始化 //viewpager设置适配器 lunbo.setAdapter(new PageAdapter()); //viewpager下面的标记点 initPoints(); //设置一开始轮播图在第一张 lunbo.setCurrentItem(0); //设置标记点第一个为选中状态 selectdePoint(0); 生成轮播图标记的代码 private void initPoints() { for (int i = 0; i \u003c 4; i++) {//因为只有四张图所以循环四次 实际可以根据图片集合的长度来循环list。size() View view = new View(getContext()); view.setBackgroundResource(R.drawable.border_white_shape); LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(15, 15); layoutParams.leftMargin = 20; view.setLayoutParams(layoutParams); points.addView(view); } } ","date":"2020-10-05","objectID":"/%E8%BD%AE%E6%92%AD%E5%9B%BE/:1:0","tags":["比赛","Android"],"title":" 轮播图","uri":"/%E8%BD%AE%E6%92%AD%E5%9B%BE/"},{"categories":["比赛","Android"],"content":"轮播图标记联动代码 //viewpager监听事件 lunbo.addOnPageChangeListener(new ViewPager.OnPageChangeListener() { @Override public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) { } @Override public void onPageSelected(int position) { int rel = position % 4; //返回但钱对应的viewpager页面下标 selectdePoint(rel); } @Override public void onPageScrollStateChanged(int state) { } }); //更具索引来设置标记点的状态 private void selectdePoint(int pos) { for (int i = 0; i \u003c 4; i++) { View view = points.getChildAt(i); if (i == pos) { view.setBackgroundResource(R.drawable.border_blue_shape); } else { view.setBackgroundResource(R.drawable.border_white_shape); } } } ","date":"2020-10-05","objectID":"/%E8%BD%AE%E6%92%AD%E5%9B%BE/:2:0","tags":["比赛","Android"],"title":" 轮播图","uri":"/%E8%BD%AE%E6%92%AD%E5%9B%BE/"},{"categories":["比赛","Android"],"content":"自动轮播的定时器 timer.schedule(new TimerTask() { @Override public void run() { getActivity().runOnUiThread(new Runnable() { @Override public void run() { //是否自动轮播如果点击箭头或滑动切换轮播图时 停止自动轮播 if (isTouch) { int index = lunbo.getCurrentItem() + 1; lunbo.setCurrentItem(index, true); } } }); } }, 1500, 2000);//第一次开启时延时1.5秒来要不然太快看不到第一张图片 每2秒切换下一张图片 ","date":"2020-10-05","objectID":"/%E8%BD%AE%E6%92%AD%E5%9B%BE/:3:0","tags":["比赛","Android"],"title":" 轮播图","uri":"/%E8%BD%AE%E6%92%AD%E5%9B%BE/"},{"categories":["比赛","Android"],"content":"ViewPager左右滑动时停止自动轮播的代码 lunbo.setOnTouchListener(new View.OnTouchListener() { @Override public boolean onTouch(View view, MotionEvent motionEvent) { isTouch = false; //直接在事件开始将是否停止自动轮播属性设为false switch (motionEvent.getAction()) { // case MotionEvent.ACTION_DOWN://因为图片设置了点击事件所以viewpager监听触摸事件监听不到按下的事件 // isTouch = false; // break; case MotionEvent.ACTION_CANCEL: case MotionEvent.ACTION_UP: //viewpager滑动结束1.5秒后开启自动轮播 timer.schedule(new TimerTask() { @Override public void run() { isTouch = true; } },1500); break; } return false; } }); ","date":"2020-10-05","objectID":"/%E8%BD%AE%E6%92%AD%E5%9B%BE/:4:0","tags":["比赛","Android"],"title":" 轮播图","uri":"/%E8%BD%AE%E6%92%AD%E5%9B%BE/"},{"categories":["比赛","Android"],"content":"两边箭头点击切换轮播图的代码 //左边箭头点击事件 iv_left.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { //获得上一个轮播图的位置 int index = lunbo.getCurrentItem() - 1; jianto(index); } }); //右边箭头点击事件 iv_right.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { //获得下一个轮播图的位置 int index = lunbo.getCurrentItem() + 1; jianto(index); } }); //设置轮播图到对应位置和点击箭头时停止自动轮播的方法 private void jianto(int index) { isTouch = false; lunbo.setCurrentItem(index, true); timer.schedule(new TimerTask() { @Override public void run() { isTouch = true; } }, 1500); } ","date":"2020-10-05","objectID":"/%E8%BD%AE%E6%92%AD%E5%9B%BE/:5:0","tags":["比赛","Android"],"title":" 轮播图","uri":"/%E8%BD%AE%E6%92%AD%E5%9B%BE/"},{"categories":["比赛","Android"],"content":"ViewPager适配器 private class PageAdapter extends PagerAdapter { @Override public int getCount() { return Integer.MAX_VALUE; } @Override public boolean isViewFromObject(@NonNull View view, @NonNull Object object) { return view == object; } @NonNull @Override public Object instantiateItem(@NonNull ViewGroup container, int position) { final int real = position % imgs.size();//imgs为图片集合 ImageView imageView = new ImageView(container.getContext()); imageView.setScaleType(ImageView.ScaleType.FIT_XY);//使图片充满布局 imageView.setImageResource(imgs.get(real)); //设置图片点击事件 imageView.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { imgClick(real); } }); container.addView(imageView); return imageView; } @Override public void destroyItem(@NonNull ViewGroup container, int position, @NonNull Object object) { container.removeView((View) object); } } ","date":"2020-10-05","objectID":"/%E8%BD%AE%E6%92%AD%E5%9B%BE/:6:0","tags":["比赛","Android"],"title":" 轮播图","uri":"/%E8%BD%AE%E6%92%AD%E5%9B%BE/"},{"categories":["比赛","Android"],"content":"轮播图图片点击事件 private void imgClick(int real) { if (getArguments() != null) { //如果是新闻入口进来的轮播图则让他跳转到新闻 getFragmentManager().beginTransaction().addToBackStack(null).replace(R.id.mian, new Fragment_4()).commit(); return; } //主页入口的轮播图则按对应跳转到相对应得项目 switch (real) { case 0: //如果是对应底部导航栏 的则模拟点击底部导航栏 getActivity().findViewById(R.id.ll_xw).performClick(); break; case 1: getFragmentManager().beginTransaction().replace(R.id.mian, new Fragment_3()).addToBackStack(null).commit(); break; case 2: getFragmentManager().beginTransaction().replace(R.id.mian, new Fragment_7()).addToBackStack(null).commit(); break; case 3: getActivity().findViewById(R.id.ll_tq).performClick(); break; } } ==最后记得在页面退出时停止轮播图自动轮播的定时器== ","date":"2020-10-05","objectID":"/%E8%BD%AE%E6%92%AD%E5%9B%BE/:7:0","tags":["比赛","Android"],"title":" 轮播图","uri":"/%E8%BD%AE%E6%92%AD%E5%9B%BE/"},{"categories":["比赛","Android"],"content":"OrmLite数据库","date":"2020-10-05","objectID":"/ormlite%E6%95%B0%E6%8D%AE%E5%BA%93/","tags":["比赛","Android"],"title":"OrmLite数据库","uri":"/ormlite%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"categories":["比赛","Android"],"content":"数据库的增删改查操作 public class MainActivity extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); try { // Dao dao = MyHelper.getInstance().getDao(User.class); Dao dao = new MyHelper(this).getDao(User.class); //耗时异步 , 主界面初始化数据表的时候 dao.callBatchTasks(new Callable() { @Override public Object call() throws Exception { return null; } }); /* for (int i = 500; i \u003c 500 + 10; i++) { User user = new User(); user.setAge(19); user.setName(\"lla张三\" + i); //插入 dao.create(user); //将整个集合中的数据插入到数据库中 //dao.create() }*/ //查询所有 // List\u003cUser\u003e list = dao.queryForAll(); //删除单个对象,或者整个集合,前提,对象或者集合,是查询出来的,不能是自己创建 //dao.delete(list); //更新的对象也是查询出来的 // dao.update() //*****************************重要******************************条件 //统计数量 // long l = dao.queryBuilder().countOf(); // Log.e(\"TAG\", \"---countOf--------\" + l); //查询有关名字为张三的 //List list1 = dao.queryForEq(\"name\", \"张三0\"); //根据id删除,id的集合 //dao.deleteIds() //跳过几个 ,查询几个 // List list = dao.queryBuilder().offset(5L).limit(5L).query(); //查询第一个 //dao.queryBuilder().offset(5L).limit(5L).queryForFirst(); //去重查询 // dao.queryBuilder().distinct().query(); //查询所有 // dao.queryBuilder().query(); //根据carnumber进行分组,每个carnumber只留最后一条数据// // List list = dao.queryBuilder().groupBy(\"name\").query(); // List list = dao.queryBuilder().groupBy(\"age\").having(\" age = 19 \").query(); //dao.queryBuilder().where().eq().query()// 完全等价dao.queryForEq(\"name\", \"张三0\") // List list = dao.queryBuilder().where().eq(\"name\", \"张三0\").and().eq(\"age\", 18).query(); // List list = dao.queryBuilder().where().eq(\"name\", \"张三1\").or().eq(\"name\", \"张三2\").query(); // List list = dao.queryBuilder().where().like(\"name\", \"%张三%\").and().eq(\"age\", 19).query(); // List list = dao.queryBuilder().where().le(\"age\", 21).query(); //le \u003c= //lt \u003c //gt \u003e= // ge \u003e //notIn //between //like //List list = dao.queryBuilder().where().gt(\"age\", 100).query(); //false 降序 List list = dao.queryBuilder().orderBy(\"age\", false).where().gt(\"age\", 100).query(); Log.e(\"TAG\", \"---countOf--------\" + list.size()); //************************************************ for (int i = 0; i \u003c list.size(); i++) { Log.e(\"TAG\", \"-----------\" + list.get(i)); } } catch (SQLException e) { e.printStackTrace(); } catch (Exception e) { e.printStackTrace(); } } } public class MyHelper extends OrmLiteSqliteOpenHelper { private static MyHelper helper; public MyHelper(Context context) { super(context, \"db.db\", null, 6); } @Override public void onCreate(SQLiteDatabase sqLiteDatabase, ConnectionSource connectionSource) { try { // TableUtils.clearTable() //建表 TableUtils.createTable(connectionSource, User.class); Log.e(\"TAG\", \"-----------clearTable----\"); } catch (SQLException e) { e.printStackTrace(); } } //单例获取 public static MyHelper getInstance() { if (helper == null) { synchronized (MyHelper.class) { if (helper == null) { helper = new MyHelper(AppClient.mContext); } } } return helper; } @Override public void onUpgrade(SQLiteDatabase sqLiteDatabase, ConnectionSource connectionSource, int i, int i1) { try { TableUtils.dropTable(connectionSource, User.class, true); onCreate(sqLiteDatabase, connectionSource); Log.e(\"TAG\", \"-----------dropTable----\"); } catch (SQLException e) { e.printStackTrace(); } } //获取dao执行对象 @Override public Dao getDao(Class clazz) throws SQLException { return super.getDao(clazz); } } ","date":"2020-10-05","objectID":"/ormlite%E6%95%B0%E6%8D%AE%E5%BA%93/:1:0","tags":["比赛","Android"],"title":"OrmLite数据库","uri":"/ormlite%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"categories":["比赛","Android"],"content":"JavaBean中需要用到的属性必须要写标注 @DatabaseTable(tableName = \"User\") //必须要写标注 public class User { //自增,主键 @DatabaseField(generatedId = true, columnName = \"_id\") private int _id; @DatabaseField(columnName = \"name\") private String name; @DatabaseField(columnName = \"age\") private int age; //必须有空参 public User() { } public int get_id() { return _id; } public void set_id(int _id) { this._id = _id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } @Override public String toString() { return \"User{\" + \"_id=\" + _id + \", name='\" + name + '\\'' + \", age=\" + age + '}'; } } ","date":"2020-10-05","objectID":"/ormlite%E6%95%B0%E6%8D%AE%E5%BA%93/:2:0","tags":["比赛","Android"],"title":"OrmLite数据库","uri":"/ormlite%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"categories":["比赛","Android"],"content":"账户管理","date":"2020-09-30","objectID":"/%E8%B4%A6%E6%88%B7%E7%AE%A1%E7%90%86/","tags":["比赛","Android"],"title":"账户管理","uri":"/%E8%B4%A6%E6%88%B7%E7%AE%A1%E7%90%86/"},{"categories":["比赛","Android"],"content":"XML就是一个ListView \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:background=\"#f1f1f1\" android:orientation=\"vertical\" \u003e \u003cListView android:id=\"@+id/lv_car\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" /\u003e \u003c/LinearLayout\u003e ","date":"2020-09-30","objectID":"/%E8%B4%A6%E6%88%B7%E7%AE%A1%E7%90%86/:1:0","tags":["比赛","Android"],"title":"账户管理","uri":"/%E8%B4%A6%E6%88%B7%E7%AE%A1%E7%90%86/"},{"categories":["比赛","Android"],"content":"initData()准备数据 private void initData() { //在sp里取小车余额的阈值 ，没有则为-1 caryz = InitApp.sp.getInt(\"caryz\", -1); //用来存批量充值的集合 czlist = new ArrayList\u003c\u003e(); //在sp里取出小车数据 String car = InitApp.sp.getString(\"car\", null); //转换成集合形式 listCar = InitApp.gson.fromJson(car, new TypeToken\u003cArrayList\u003cCar.ROWSDETAILBean\u003e\u003e() { }.getType()); //设置适配器 lv_car.setAdapter(new carAdapter()); } ","date":"2020-09-30","objectID":"/%E8%B4%A6%E6%88%B7%E7%AE%A1%E7%90%86/:2:0","tags":["比赛","Android"],"title":"账户管理","uri":"/%E8%B4%A6%E6%88%B7%E7%AE%A1%E7%90%86/"},{"categories":["比赛","Android"],"content":"onStart()方法 @Override public void onStart() { super.onStart(); //获得标题栏上的充值记录和批量充值控件 TextView tv_plcz = getActivity().findViewById(R.id.tv_plcz); TextView tv_czjl = getActivity().findViewById(R.id.tv_czjl); tv_plcz.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { //判断存放批量充值对象的集合里是否有对象 if (czlist.size() == 0) { InitApp.toast(\"您还没有选择充值的车辆\"); return; } showDiglog(czlist); } }); tv_czjl.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { Fragment_3 fragment_3 = new Fragment_3(); fragment_3.setArguments(new Bundle()); getFragmentManager().beginTransaction().replace(R.id.maincontent, fragment_3).commit(); TextView textView = getActivity().findViewById(R.id.tv_title); textView.setText(\"个人中心\"); } }); } ","date":"2020-09-30","objectID":"/%E8%B4%A6%E6%88%B7%E7%AE%A1%E7%90%86/:3:0","tags":["比赛","Android"],"title":"账户管理","uri":"/%E8%B4%A6%E6%88%B7%E7%AE%A1%E7%90%86/"},{"categories":["比赛","Android"],"content":"onStop()方法 @Override public void onStop() { super.onStop(); //将标题栏中的充值记录和批量充值控件隐藏 tv_plcz.setVisibility(View.GONE); tv_czjl.setVisibility(View.GONE); //将小车信息存入sp中 InitApp.edit.putString(\"car\", InitApp.gson.toJson(listCar)).commit(); } ","date":"2020-09-30","objectID":"/%E8%B4%A6%E6%88%B7%E7%AE%A1%E7%90%86/:4:0","tags":["比赛","Android"],"title":"账户管理","uri":"/%E8%B4%A6%E6%88%B7%E7%AE%A1%E7%90%86/"},{"categories":["比赛","Android"],"content":"充值对话框 ","date":"2020-09-30","objectID":"/%E8%B4%A6%E6%88%B7%E7%AE%A1%E7%90%86/:5:0","tags":["比赛","Android"],"title":"账户管理","uri":"/%E8%B4%A6%E6%88%B7%E7%AE%A1%E7%90%86/"},{"categories":["比赛","Android"],"content":"car_dialog.xml对话框布局 \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:background=\"@drawable/boder_bh\" android:orientation=\"vertical\" \u003e \u003cTextView android:textSize=\"30sp\" android:textColor=\"#000\" android:textStyle=\"bold\" android:gravity=\"center_vertical\" android:paddingLeft=\"30sp\" android:id=\"@+id/textView1\" android:layout_width=\"match_parent\" android:layout_height=\"80dp\" android:background=\"@drawable/boder_hh\" android:text=\"车辆账户充值\" /\u003e \u003cLinearLayout android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:background=\"#ffffff\" android:layout_marginRight=\"10dp\" android:layout_marginLeft=\"10dp\" android:layout_marginTop=\"40dp\" android:orientation=\"horizontal\" \u003e \u003cTextView android:layout_width=\"100dp\" android:layout_height=\"wrap_content\" android:layout_marginLeft=\"10dp\" android:gravity=\"right\" android:text=\"车牌号：\" android:textColor=\"#000\" \u003e \u003c/TextView\u003e \u003cScrollView android:layout_marginLeft=\"10dp\" android:layout_marginRight=\"20dp\" android:gravity=\"left\" android:layout_width=\"match_parent\" android:layout_height=\"20dp\"\u003e \u003cTextView android:id=\"@+id/tv_cps\" android:textSize=\"18sp\" android:textColor=\"#000\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" /\u003e \u003c/ScrollView\u003e \u003c/LinearLayout\u003e \u003cLinearLayout android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:layout_marginRight=\"10dp\" android:layout_marginTop=\"20dp\" android:layout_marginLeft=\"10dp\" android:background=\"#ffffff\" android:orientation=\"horizontal\" \u003e \u003cTextView android:layout_width=\"100dp\" android:layout_height=\"wrap_content\" android:layout_marginLeft=\"10dp\" android:gravity=\"right\" android:text=\"充值金额：\" android:textColor=\"#000\" \u003e \u003c/TextView\u003e \u003cEditText android:id=\"@+id/et_cz\" android:layout_width=\"180dp\" android:layout_height=\"wrap_content\" android:layout_marginLeft=\"10dp\" android:layout_marginRight=\"10dp\" android:gravity=\"left\" android:singleLine=\"true\" android:maxLength=\"3\" android:inputType=\"number\" android:padding=\"5dp\" android:lines=\"1\" android:hint=\"1~999\" android:text=\"\"\u003e \u003c/EditText\u003e \u003cTextView android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:layout_marginLeft=\"10dp\" android:gravity=\"right\" android:text=\"元\" android:textColor=\"#000\" \u003e \u003c/TextView\u003e \u003c/LinearLayout\u003e \u003cLinearLayout android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:layout_marginTop=\"40dp\" android:layout_marginBottom=\"40dp\" android:gravity=\"center\" android:orientation=\"horizontal\"\u003e \u003cButton android:id=\"@+id/bt_cz\" android:layout_width=\"100dp\" android:layout_height=\"wrap_content\" android:padding=\"10dp\" android:textStyle=\"bold\" android:text=\"充值\" android:textColor=\"#000\"/\u003e \u003cButton android:id=\"@+id/bt_qx\" android:layout_width=\"100dp\" android:layout_height=\"wrap_content\" android:padding=\"10dp\" android:text=\"取消\" android:textStyle=\"bold\" android:layout_marginLeft=\"100dp\" android:textColor=\"#000\" /\u003e \u003c/LinearLayout\u003e \u003c/LinearLayout\u003e private void showDiglog(final ArrayList\u003cCar.ROWSDETAILBean\u003e list) { final Dialog dialog = new Dialog(getContext()); dialog.getWindow().requestFeature(Window.FEATURE_NO_TITLE); dialog.setContentView(R.layout.car_dialog); dialog.show(); TextView tv_cps = dialog.findViewById(R.id.tv_cps); final EditText et_cz = dialog.findViewById(R.id.et_cz); Button bt_qx = dialog.findViewById(R.id.bt_qx); Button bt_cz = dialog.findViewById(R.id.bt_cz); //循环集合拼接车牌号 String cps = \"\"; for (Car.ROWSDETAILBean bean : list) { cps += bean.getCarnumber() + \" \"; } tv_cps.setText(cps); //充值按钮监听事件 bt_cz.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { String mon = et_cz.getText().toString().trim(); //判断输入框输入是否为空 if (TextUtils.isEmpty(mon)) { InitApp.toast(\"输入金额不能为空\"); return; } //判断输入金额是否在1~999之间 int money = Integer.parseInt(mon); if (money \u003c= 0 || money \u003e 999) { InitApp.toast(\"只能输入1~999之间的整数\"); return; } //取sp里的充值记录 Stri","date":"2020-09-30","objectID":"/%E8%B4%A6%E6%88%B7%E7%AE%A1%E7%90%86/:5:1","tags":["比赛","Android"],"title":"账户管理","uri":"/%E8%B4%A6%E6%88%B7%E7%AE%A1%E7%90%86/"},{"categories":["比赛","Android"],"content":"数据适配器 private class carAdapter extends BaseAdapter { @Override public int getCount() { return listCar.size(); } @Override public Car.ROWSDETAILBean getItem(int i) { return listCar.get(i); } @Override public long getItemId(int i) { return i; } @Override public View getView(int i, View view, ViewGroup viewGroup) { ViewHolder viewHolder; if (view == null) { view = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.item_car, viewGroup, false); viewHolder = new ViewHolder(view); view.setTag(viewHolder); } else { viewHolder = (ViewHolder) view.getTag(); } final Car.ROWSDETAILBean item = getItem(i); item.setIndex(i);//将序号存入javabean中 viewHolder.tv_xh.setText(String.valueOf(i + 1)); viewHolder.tv_cp.setText(item.getCarnumber()); viewHolder.tv_cz.setText(\"车主：\" + InitApp.user.getPname()); viewHolder.tv_yue.setText(\"余额：\" + item.getYue() + \"元\"); //取出车标图片 int drawable = getContext().getResources().getIdentifier(item.getCarbrand(), \"drawable\", getContext().getPackageName()); viewHolder.iv_car.setImageResource(drawable); //判断余额是否小于阈值 if (item.getYue() \u003c caryz) { view.setBackgroundColor(Color.parseColor(\"#ffcc00\")); } //复选框监听 viewHolder.cb_pl.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() { @Override public void onCheckedChanged(CompoundButton compoundButton, boolean b) { if (b) {//选择则加入集合中 czlist.add(item); } else {//未选中则删除 czlist.remove(item); } } }); view.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { showDiglog(new ArrayList\u003cCar.ROWSDETAILBean\u003e() {{ add(item); }}); } }); return view; } class ViewHolder { public View rootView; public TextView tv_xh; public ImageView iv_car; public TextView tv_cp; public TextView tv_cz; public TextView tv_yue; public CheckBox cb_pl; public Button bt_cz; public ViewHolder(View rootView) { this.rootView = rootView; this.tv_xh = (TextView) rootView.findViewById(R.id.tv_xh); this.iv_car = (ImageView) rootView.findViewById(R.id.iv_car); this.tv_cp = (TextView) rootView.findViewById(R.id.tv_cp); this.tv_cz = (TextView) rootView.findViewById(R.id.tv_cz); this.tv_yue = (TextView) rootView.findViewById(R.id.tv_yue); this.cb_pl = (CheckBox) rootView.findViewById(R.id.cb_pl); } } } ","date":"2020-09-30","objectID":"/%E8%B4%A6%E6%88%B7%E7%AE%A1%E7%90%86/:6:0","tags":["比赛","Android"],"title":"账户管理","uri":"/%E8%B4%A6%E6%88%B7%E7%AE%A1%E7%90%86/"},{"categories":["比赛","Android"],"content":"Android 通知栏","date":"2020-09-30","objectID":"/android-%E9%80%9A%E7%9F%A5%E6%A0%8F/","tags":["比赛","Android"],"title":" Android 通知栏","uri":"/android-%E9%80%9A%E7%9F%A5%E6%A0%8F/"},{"categories":["比赛","Android"],"content":" public void tz(int id,String title,String text){ Intent intent = new Intent(getApplicationContext(),MainActivity.class); intent.putExtra(\"tz\",true); PendingIntent activity = PendingIntent.getActivity(getApplicationContext(),1,intent,0); NotificationManager manager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE); Notification.Builder builder = new Notification.Builder(getApplicationContext()); builder.setSmallIcon(R.drawable.icon_etc) .setContentTitle(title) .setContentText(text) .setContentIntent(activity); manager.notify(id,builder.build()); } Android9.0以下通知栏，9.0以上要加判断条件和代码 ","date":"2020-09-30","objectID":"/android-%E9%80%9A%E7%9F%A5%E6%A0%8F/:0:0","tags":["比赛","Android"],"title":" Android 通知栏","uri":"/android-%E9%80%9A%E7%9F%A5%E6%A0%8F/"},{"categories":["比赛","Android"],"content":"Android 图片缩放","date":"2020-09-28","objectID":"/android-%E5%9B%BE%E7%89%87%E7%BC%A9%E6%94%BE/","tags":["比赛","Android"],"title":"Android 图片缩放","uri":"/android-%E5%9B%BE%E7%89%87%E7%BC%A9%E6%94%BE/"},{"categories":["比赛","Android"],"content":" public class Zoom implements View.OnTouchListener { int model; @Override public boolean onTouch(View view, MotionEvent motionEvent) { switch (motionEvent.getActionMasked()) { case MotionEvent.ACTION_DOWN: model = 1; break; case MotionEvent.ACTION_POINTER_DOWN: model = 2; break; case MotionEvent.ACTION_MOVE: if (model == 2) { float x = motionEvent.getX(0); float x1 = motionEvent.getX(1); float y = motionEvent.getY(0); float y2 = motionEvent.getY(1); double sqrt = Math.sqrt((x - x1) * (x - x1) + (y - y2) * (y - y2)); ViewGroup.LayoutParams layoutParams = view.getLayoutParams(); layoutParams.height = (int) sqrt; layoutParams.width = (int) sqrt; view.setLayoutParams(layoutParams); } break; } return true; } } ","date":"2020-09-28","objectID":"/android-%E5%9B%BE%E7%89%87%E7%BC%A9%E6%94%BE/:0:0","tags":["比赛","Android"],"title":"Android 图片缩放","uri":"/android-%E5%9B%BE%E7%89%87%E7%BC%A9%E6%94%BE/"},{"categories":["比赛","Android"],"content":"使用实例 //设置ImageView控件缩放 img.setOnTouchListener(new Zoom()); ","date":"2020-09-28","objectID":"/android-%E5%9B%BE%E7%89%87%E7%BC%A9%E6%94%BE/:1:0","tags":["比赛","Android"],"title":"Android 图片缩放","uri":"/android-%E5%9B%BE%E7%89%87%E7%BC%A9%E6%94%BE/"},{"categories":["比赛","Android"],"content":"车辆违章","date":"2020-06-23","objectID":"/%E8%BD%A6%E8%BE%86%E8%BF%9D%E7%AB%A0/","tags":["比赛","Android"],"title":"车辆违章","uri":"/%E8%BD%A6%E8%BE%86%E8%BF%9D%E7%AB%A0/"},{"categories":["比赛","Android"],"content":"最上面的两个按钮 \u003cLinearLayout android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\"\u003e \u003cTextView android:id=\"@+id/tv_sp\" android:textColor=\"#000\" android:textStyle=\"bold\" android:text=\"违章视频\" android:textSize=\"25sp\" android:gravity=\"center\" android:background=\"@drawable/border_czjl\" android:layout_width=\"180dp\" android:layout_height=\"50dp\"/\u003e \u003cTextView android:id=\"@+id/tv_tp\" android:textColor=\"#000\" android:textStyle=\"bold\" android:text=\"违章视频\" android:textSize=\"25sp\" android:gravity=\"center\" android:background=\"@drawable/cartitle\" android:layout_width=\"180dp\" android:layout_height=\"50dp\"/\u003e \u003c/LinearLayout\u003e \u003cView android:background=\"@color/light_gray\" android:layout_width=\"match_parent\" android:layout_height=\"2dp\" /\u003e 下面用一个GridView用不同数据填充 \u003cGridView android:id=\"@+id/gv_05\" android:layout_marginTop=\"30dp\" android:numColumns=\"4\" android:verticalSpacing=\"50dp\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" /\u003e java代码 控件 tv_sp = (TextView) view.findViewById(R.id.tv_sp); tv_tp = (TextView) view.findViewById(R.id.tv_tp); gv_05 = (GridView) view.findViewById(R.id.gv_05); ","date":"2020-06-23","objectID":"/%E8%BD%A6%E8%BE%86%E8%BF%9D%E7%AB%A0/:1:0","tags":["比赛","Android"],"title":"车辆违章","uri":"/%E8%BD%A6%E8%BE%86%E8%BF%9D%E7%AB%A0/"},{"categories":["比赛","Android"],"content":"适配器和点击事件监听 hashMaps = new ArrayList\u003c\u003e(); //存图片和对应文字得集合 //SimpleAdapter 适配器 adapter = new SimpleAdapter(getContext(), hashMaps, R.layout.item5_gv,new String[]{\"iv\",\"tv\"},new int[]{R.id.iv_05,R.id.tv_05}); initData(ship,\"视频\"); gv_05.setAdapter(adapter);//设置设配器 //tv_sp上面得违章视频TextView tv_sp.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { //将未点击的控件设置灰底边框 tv_tp.setBackgroundResource(R.drawable.cartitle); //将点击的控件设置白底边框 tv_sp.setBackgroundResource(R.drawable.border_czjl); //对应更新hashMaps里得数据 initData(ship,\"视频\"); } }); ","date":"2020-06-23","objectID":"/%E8%BD%A6%E8%BE%86%E8%BF%9D%E7%AB%A0/:2:0","tags":["比赛","Android"],"title":"车辆违章","uri":"/%E8%BD%A6%E8%BE%86%E8%BF%9D%E7%AB%A0/"},{"categories":["比赛","Android"],"content":"对应集合数据 final ArrayList\u003cInteger\u003e img = new ArrayList\u003cInteger\u003e() {{ add(R.drawable.weizhang01); add(R.drawable.weizhang02); add(R.drawable.weizhang03); add(R.drawable.weizhang04); }}; final ArrayList\u003cInteger\u003e ship = new ArrayList\u003cInteger\u003e() {{ add(R.drawable.video_icon); add(R.drawable.video_icon); add(R.drawable.video_icon); add(R.drawable.video_icon); }}; ","date":"2020-06-23","objectID":"/%E8%BD%A6%E8%BE%86%E8%BF%9D%E7%AB%A0/:3:0","tags":["比赛","Android"],"title":"车辆违章","uri":"/%E8%BD%A6%E8%BE%86%E8%BF%9D%E7%AB%A0/"},{"categories":["比赛","Android"],"content":"提出来initData()方法来更新hashMaps数据 private void initData(ArrayList\u003cInteger\u003e img, String s) { hashMaps.clear(); for (int i = 0; i \u003c 4; ++i) { HashMap\u003cString, Object\u003e item1 = new HashMap\u003cString, Object\u003e(); item1.put(\"iv\", img.get(i)); item1.put(\"tv\", s); hashMaps.add(item1); } adapter.notifyDataSetChange(); } ","date":"2020-06-23","objectID":"/%E8%BD%A6%E8%BE%86%E8%BF%9D%E7%AB%A0/:4:0","tags":["比赛","Android"],"title":"车辆违章","uri":"/%E8%BD%A6%E8%BE%86%E8%BF%9D%E7%AB%A0/"},{"categories":["比赛","Android"],"content":"GridView的点击事件监听 gv_05.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView\u003c?\u003e parent, View view, int position, long id) { Intent intent ; //判断集合中的tv键对应值是否为空 为空则为违章图片查看 if (hashMaps.get(position).get(\"tv\") == null) {//违章图片 //跳转到图片查看的Activity intent = new Intent(getContext(), ImgActivity.class); //将对应图片传递过去 intent.putExtra(\"img\", img.get(position)); } else {//违章视频 //跳转到视频查看的Activity intent = new Intent(getContext(), VcActivity.class); //将对应的视频序号传递 intent.putExtra(\"void\", position); } startActivity(intent); } }); ","date":"2020-06-23","objectID":"/%E8%BD%A6%E8%BE%86%E8%BF%9D%E7%AB%A0/:5:0","tags":["比赛","Android"],"title":"车辆违章","uri":"/%E8%BD%A6%E8%BE%86%E8%BF%9D%E7%AB%A0/"},{"categories":["比赛","Android"],"content":"ImgActivity.class的代码 @Override protected void onCreate(@Nullable Bundle savedInstanceState) { requestWindowFeature(Window.FEATURE_NO_TITLE); getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN); super.onCreate(savedInstanceState); setContentView(R.layout.activity_img); initView(); } private void initView() {//插件生成 tv_back = (ImageView) findViewById(R.id.tv_back); tv_title = (TextView) findViewById(R.id.tv_title); img = (ImageView) findViewById(R.id.img); tv_back.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { finish(); } }); tv_title.setText(\"违章图片\"); //取出上面fragment传递过来的图片 img.setImageResource(getIntent().getIntExtra(\"img\", R.drawable.weizhang01)); //设置ImageView控件缩放 img.setOnTouchListener(new Zoom()); } ","date":"2020-06-23","objectID":"/%E8%BD%A6%E8%BE%86%E8%BF%9D%E7%AB%A0/:6:0","tags":["比赛","Android"],"title":"车辆违章","uri":"/%E8%BD%A6%E8%BE%86%E8%BF%9D%E7%AB%A0/"},{"categories":["比赛","Android"],"content":"布局代码activity_img.xml \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:orientation=\"vertical\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"\u003e \u003cinclude layout=\"@layout/title\"/\u003e //不使用相对布局缩放会以固定位置放大缩小 \u003cRelativeLayout android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"\u003e \u003cImageView android:id=\"@+id/img\" android:layout_centerInParent=\"true\" android:src=\"@drawable/weizhang01\" android:layout_width=\"300dp\" //初始大小必须设死不然无法缩放 android:layout_height=\"300dp\" /\u003e \u003c/RelativeLayout\u003e \u003c/LinearLayout\u003e ","date":"2020-06-23","objectID":"/%E8%BD%A6%E8%BE%86%E8%BF%9D%E7%AB%A0/:7:0","tags":["比赛","Android"],"title":"车辆违章","uri":"/%E8%BD%A6%E8%BE%86%E8%BF%9D%E7%AB%A0/"},{"categories":["比赛","Android"],"content":"VcActivity.class代码 public class VcActivity extends Activity { private ImageView tv_back; private TextView tv_title; private ImageView im_ref; private VideoView vv; private ArrayList\u003cInteger\u003e vc = new ArrayList\u003cInteger\u003e() {{ add(R.raw.car1); add(R.raw.car2); add(R.raw.car3); add(R.raw.car4); }}; @Override protected void onCreate(@Nullable Bundle savedInstanceState) { requestWindowFeature(Window.FEATURE_NO_TITLE); getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN); super.onCreate(savedInstanceState); setContentView(R.layout.activity_vc); initView(); } private void initView() { //插件生成 tv_back = (ImageView) findViewById(R.id.tv_back); tv_title = (TextView) findViewById(R.id.tv_title); im_ref = (ImageView) findViewById(R.id.im_ref); vv = (VideoView) findViewById(R.id.vv); tv_title.setText(\"违章视频\"); tv_back.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { finish(); } }); //获得上面fragment传递过来的点击的视频位置 int v = getIntent().getIntExtra(\"vc\", 1); MediaController mediaController = new MediaController(getApplicationContext()); //设置播放的视频 vv.setVideoURI(Uri.parse(\"android.resource://\" + getPackageName() + \"/\" + vc.get(v))); mediaController.setMediaPlayer(vv); vv.start(); mediaController.show(); } ","date":"2020-06-23","objectID":"/%E8%BD%A6%E8%BE%86%E8%BF%9D%E7%AB%A0/:8:0","tags":["比赛","Android"],"title":"车辆违章","uri":"/%E8%BD%A6%E8%BE%86%E8%BF%9D%E7%AB%A0/"},{"categories":["比赛","Android"],"content":"布局代码activity_vc.xml \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:orientation=\"vertical\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"\u003e \u003cinclude layout=\"@layout/title\" /\u003e \u003cVideoView android:id=\"@+id/vv\" android:layout_marginTop=\"100dp\" //竖屏要上面marginTop100dp才能大概居中，不能用paddingTop没有效果 android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" /\u003e \u003c/LinearLayout\u003e ","date":"2020-06-23","objectID":"/%E8%BD%A6%E8%BE%86%E8%BF%9D%E7%AB%A0/:9:0","tags":["比赛","Android"],"title":"车辆违章","uri":"/%E8%BD%A6%E8%BE%86%E8%BF%9D%E7%AB%A0/"},{"categories":["VSCode"],"content":"VSCode编辑器","date":"2020-03-10","objectID":"/vscode%E7%BC%96%E8%BE%91%E5%99%A8/","tags":["VSCode"],"title":" VSCode编辑器","uri":"/vscode%E7%BC%96%E8%BE%91%E5%99%A8/"},{"categories":["VSCode"],"content":"VSCode快捷键 ​ 设置：文件-\u003e 首选项 -\u003e 设置 ( 大小、是否换行 word wrap ) ctrl + s : 保存 ctrl + a : 全选 ctrl + x、ctrl + c、ctrl + v : 剪切、复制、粘贴 ctrl + z、ctrl + y : 撤销、前进 shift + end : 从头选中一行 shift + home : 从尾部选中一行 shift + alt + ↓ : 快速复制一行 alt + ↑或↓ : 快速移动一行 tab : 向后缩进 tab + shift : 向前缩进 多光标 : alt + 鼠标左键 ctrl + d : 选则相同元素的下一个 快捷添加注释和删除注释 1.ctrl + / 2.shift + alt + a ","date":"2020-03-10","objectID":"/vscode%E7%BC%96%E8%BE%91%E5%99%A8/:1:0","tags":["VSCode"],"title":" VSCode编辑器","uri":"/vscode%E7%BC%96%E8%BE%91%E5%99%A8/"},{"categories":["Markdown"],"content":"Markdown语法学习","date":"2019-03-04","objectID":"/markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/","tags":["Markdown"],"title":"Markdown语法学习","uri":"/markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/"},{"categories":["Markdown"],"content":"标题 ​ Ctrl + 1~5 ","date":"2019-03-04","objectID":"/markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/:1:0","tags":["Markdown"],"title":"Markdown语法学习","uri":"/markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/"},{"categories":["Markdown"],"content":"文档导航 ​ [toc] ","date":"2019-03-04","objectID":"/markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/:2:0","tags":["Markdown"],"title":"Markdown语法学习","uri":"/markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/"},{"categories":["Markdown"],"content":"代码 短代码：code 长代码：``` + java (什么语言后面加什么) 1 public class HelloWorld { 2 public static void main(String[] args){ 3 System.out.println(\"HelloWorld\"); 4 } 5 } ","date":"2019-03-04","objectID":"/markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/:3:0","tags":["Markdown"],"title":"Markdown语法学习","uri":"/markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/"},{"categories":["Markdown"],"content":"引用 \u003e式 度尽劫波 （```式） 代码之内的 print('hello nick') ","date":"2019-03-04","objectID":"/markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/:4:0","tags":["Markdown"],"title":"Markdown语法学习","uri":"/markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/"},{"categories":["Markdown"],"content":"图片 ![](url) 这是取的七牛云里的图片 ","date":"2019-03-04","objectID":"/markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/:5:0","tags":["Markdown"],"title":"Markdown语法学习","uri":"/markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/"},{"categories":["Markdown"],"content":"链接 [超链接名]（超链接地址） 百度 \u003c超链接地址\u003e(这种方式以链接地址本身显示) https://www.cnblogs.com/nickchen121/p/10718112.html ","date":"2019-03-04","objectID":"/markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/:6:0","tags":["Markdown"],"title":"Markdown语法学习","uri":"/markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/"},{"categories":["Markdown"],"content":"列表 - + * 都可以（跟内容之间有空格） 列表1 列表2 列表3 1.（也可以） 列表1 列表2 列表2 ","date":"2019-03-04","objectID":"/markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/:7:0","tags":["Markdown"],"title":"Markdown语法学习","uri":"/markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/"},{"categories":["Markdown"],"content":"加粗 ** 要加粗的文本 ** 我被加粗了 ","date":"2019-03-04","objectID":"/markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/:8:0","tags":["Markdown"],"title":"Markdown语法学习","uri":"/markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/"},{"categories":["Markdown"],"content":"斜体 * 要倾斜的文本 * 我被倾斜了 ","date":"2019-03-04","objectID":"/markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/:9:0","tags":["Markdown"],"title":"Markdown语法学习","uri":"/markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/"},{"categories":["Markdown"],"content":"分割线 ​ --- 效果： ","date":"2019-03-04","objectID":"/markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/:10:0","tags":["Markdown"],"title":"Markdown语法学习","uri":"/markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/"},{"categories":["Markdown"],"content":"表格 ​ 第二行必须得有，并且第二行的冒号代表对齐格式，分别为居中；右对齐；左对齐）： 代码： name | age | sex :-:|:-|-: tony|20|男 lucy|18|女 效果： name age sex tony 20 男 lucy 18 女 ","date":"2019-03-04","objectID":"/markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/:11:0","tags":["Markdown"],"title":"Markdown语法学习","uri":"/markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/"},{"categories":["Markdown"],"content":"数学公式（块状） 代码： $$ \\sum_{i=1}^{10}f(i)\\,\\,\\text{thanks} $$ 效果： $$ \\sum_{i=1}^{10}f(i),,\\text{thanks} $$ ","date":"2019-03-04","objectID":"/markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/:12:0","tags":["Markdown"],"title":"Markdown语法学习","uri":"/markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/"}]